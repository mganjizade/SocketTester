// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Connection.proto

#include "Connection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class DFarametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DFarameters> _instance;
} _DFarameters_default_instance_;
class SystemParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemParameters> _instance;
} _SystemParameters_default_instance_;
class FrequencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frequency> _instance;
} _Frequency_default_instance_;
class ThresholdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Threshold> _instance;
} _Threshold_default_instance_;
class PSDDataRdyDOUBLEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PSDDataRdyDOUBLE> _instance;
} _PSDDataRdyDOUBLE_default_instance_;
class PSDDataRdyINTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PSDDataRdyINT> _instance;
} _PSDDataRdyINT_default_instance_;
class DOADataRdydoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DOADataRdydouble> _instance;
} _DOADataRdydouble_default_instance_;
class DOADataRdyshortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DOADataRdyshort> _instance;
} _DOADataRdyshort_default_instance_;
class AudioDataRdyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioDataRdy> _instance;
} _AudioDataRdy_default_instance_;
class AudioStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioState> _instance;
} _AudioState_default_instance_;
class GPSParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSParameter> _instance;
} _GPSParameter_default_instance_;
class AntennaStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AntennaState> _instance;
} _AntennaState_default_instance_;
class AntennaOFFsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AntennaOFFset> _instance;
} _AntennaOFFset_default_instance_;
class DefaultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Defaults> _instance;
} _Defaults_default_instance_;
class ClassificationStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationState> _instance;
} _ClassificationState_default_instance_;
class ClassificationDataRdyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationDataRdy> _instance;
} _ClassificationDataRdy_default_instance_;
class DFstateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DFstate> _instance;
} _DFstate_default_instance_;
class TransferDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferData> _instance;
} _TransferData_default_instance_;
static void InitDefaultsscc_info_AntennaOFFset_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AntennaOFFset_default_instance_;
    new (ptr) ::AntennaOFFset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AntennaOFFset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AntennaOFFset_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AntennaOFFset_Connection_2eproto}, {}};

static void InitDefaultsscc_info_AntennaState_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AntennaState_default_instance_;
    new (ptr) ::AntennaState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AntennaState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AntennaState_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AntennaState_Connection_2eproto}, {}};

static void InitDefaultsscc_info_AudioDataRdy_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AudioDataRdy_default_instance_;
    new (ptr) ::AudioDataRdy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AudioDataRdy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioDataRdy_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioDataRdy_Connection_2eproto}, {}};

static void InitDefaultsscc_info_AudioState_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AudioState_default_instance_;
    new (ptr) ::AudioState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AudioState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioState_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioState_Connection_2eproto}, {}};

static void InitDefaultsscc_info_ClassificationDataRdy_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClassificationDataRdy_default_instance_;
    new (ptr) ::ClassificationDataRdy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClassificationDataRdy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassificationDataRdy_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClassificationDataRdy_Connection_2eproto}, {}};

static void InitDefaultsscc_info_ClassificationState_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClassificationState_default_instance_;
    new (ptr) ::ClassificationState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClassificationState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassificationState_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClassificationState_Connection_2eproto}, {}};

static void InitDefaultsscc_info_DFarameters_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DFarameters_default_instance_;
    new (ptr) ::DFarameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DFarameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DFarameters_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DFarameters_Connection_2eproto}, {}};

static void InitDefaultsscc_info_DFstate_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DFstate_default_instance_;
    new (ptr) ::DFstate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DFstate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DFstate_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DFstate_Connection_2eproto}, {}};

static void InitDefaultsscc_info_DOADataRdydouble_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DOADataRdydouble_default_instance_;
    new (ptr) ::DOADataRdydouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DOADataRdydouble::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DOADataRdydouble_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DOADataRdydouble_Connection_2eproto}, {}};

static void InitDefaultsscc_info_DOADataRdyshort_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DOADataRdyshort_default_instance_;
    new (ptr) ::DOADataRdyshort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DOADataRdyshort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DOADataRdyshort_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DOADataRdyshort_Connection_2eproto}, {}};

static void InitDefaultsscc_info_Defaults_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Defaults_default_instance_;
    new (ptr) ::Defaults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Defaults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Defaults_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Defaults_Connection_2eproto}, {}};

static void InitDefaultsscc_info_Frequency_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Frequency_default_instance_;
    new (ptr) ::Frequency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Frequency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Frequency_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Frequency_Connection_2eproto}, {}};

static void InitDefaultsscc_info_GPSParameter_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GPSParameter_default_instance_;
    new (ptr) ::GPSParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GPSParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSParameter_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPSParameter_Connection_2eproto}, {}};

static void InitDefaultsscc_info_PSDDataRdyDOUBLE_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PSDDataRdyDOUBLE_default_instance_;
    new (ptr) ::PSDDataRdyDOUBLE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PSDDataRdyDOUBLE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PSDDataRdyDOUBLE_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PSDDataRdyDOUBLE_Connection_2eproto}, {}};

static void InitDefaultsscc_info_PSDDataRdyINT_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PSDDataRdyINT_default_instance_;
    new (ptr) ::PSDDataRdyINT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PSDDataRdyINT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PSDDataRdyINT_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PSDDataRdyINT_Connection_2eproto}, {}};

static void InitDefaultsscc_info_SystemParameters_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SystemParameters_default_instance_;
    new (ptr) ::SystemParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SystemParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemParameters_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemParameters_Connection_2eproto}, {}};

static void InitDefaultsscc_info_Threshold_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Threshold_default_instance_;
    new (ptr) ::Threshold();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Threshold::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Threshold_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Threshold_Connection_2eproto}, {}};

static void InitDefaultsscc_info_TransferData_Connection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransferData_default_instance_;
    new (ptr) ::TransferData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransferData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferData_Connection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferData_Connection_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Connection_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Connection_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Connection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Connection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DFarameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DFarameters, azimuth_),
  PROTOBUF_FIELD_OFFSET(::DFarameters, quality_),
  PROTOBUF_FIELD_OFFSET(::DFarameters, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SystemParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SystemParameters, agcdata_),
  PROTOBUF_FIELD_OFFSET(::SystemParameters, mgcdata_),
  PROTOBUF_FIELD_OFFSET(::SystemParameters, rfhead_),
  PROTOBUF_FIELD_OFFSET(::SystemParameters, demod_),
  PROTOBUF_FIELD_OFFSET(::SystemParameters, fft_),
  PROTOBUF_FIELD_OFFSET(::SystemParameters, setsquelch_),
  PROTOBUF_FIELD_OFFSET(::SystemParameters, volume_),
  PROTOBUF_FIELD_OFFSET(::SystemParameters, average_),
  PROTOBUF_FIELD_OFFSET(::SystemParameters, bandwidth_),
  PROTOBUF_FIELD_OFFSET(::SystemParameters, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Frequency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Frequency, freq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Threshold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Threshold, thr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PSDDataRdyDOUBLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PSDDataRdyDOUBLE, type_),
  PROTOBUF_FIELD_OFFSET(::PSDDataRdyDOUBLE, size_),
  PROTOBUF_FIELD_OFFSET(::PSDDataRdyDOUBLE, psddata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PSDDataRdyINT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PSDDataRdyINT, size_),
  PROTOBUF_FIELD_OFFSET(::PSDDataRdyINT, psddata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DOADataRdydouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DOADataRdydouble, type_),
  PROTOBUF_FIELD_OFFSET(::DOADataRdydouble, size_),
  PROTOBUF_FIELD_OFFSET(::DOADataRdydouble, doadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DOADataRdyshort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DOADataRdyshort, size_),
  PROTOBUF_FIELD_OFFSET(::DOADataRdyshort, doadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AudioDataRdy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AudioDataRdy, size_),
  PROTOBUF_FIELD_OFFSET(::AudioDataRdy, audiodata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AudioState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AudioState, audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GPSParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GPSParameter, lat_),
  PROTOBUF_FIELD_OFFSET(::GPSParameter, long__),
  PROTOBUF_FIELD_OFFSET(::GPSParameter, compassoffset_),
  PROTOBUF_FIELD_OFFSET(::GPSParameter, azimuth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AntennaState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AntennaState, add050_),
  PROTOBUF_FIELD_OFFSET(::AntennaState, add150_),
  PROTOBUF_FIELD_OFFSET(::AntennaState, add078_),
  PROTOBUF_FIELD_OFFSET(::AntennaState, add070_),
  PROTOBUF_FIELD_OFFSET(::AntennaState, add327_),
  PROTOBUF_FIELD_OFFSET(::AntennaState, add207_),
  PROTOBUF_FIELD_OFFSET(::AntennaState, add107_),
  PROTOBUF_FIELD_OFFSET(::AntennaState, add227_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AntennaOFFset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AntennaOFFset, add050_),
  PROTOBUF_FIELD_OFFSET(::AntennaOFFset, add150_),
  PROTOBUF_FIELD_OFFSET(::AntennaOFFset, add078_),
  PROTOBUF_FIELD_OFFSET(::AntennaOFFset, add070_),
  PROTOBUF_FIELD_OFFSET(::AntennaOFFset, add327_),
  PROTOBUF_FIELD_OFFSET(::AntennaOFFset, add207_),
  PROTOBUF_FIELD_OFFSET(::AntennaOFFset, add107_),
  PROTOBUF_FIELD_OFFSET(::AntennaOFFset, add227_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Defaults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Defaults, systemtype_),
  PROTOBUF_FIELD_OFFSET(::Defaults, widebandbanwith_),
  PROTOBUF_FIELD_OFFSET(::Defaults, minimumfreqrange_),
  PROTOBUF_FIELD_OFFSET(::Defaults, maximumfreqrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClassificationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClassificationState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClassificationDataRdy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClassificationDataRdy, signalmode_),
  PROTOBUF_FIELD_OFFSET(::ClassificationDataRdy, startindex_),
  PROTOBUF_FIELD_OFFSET(::ClassificationDataRdy, stopindex_),
  PROTOBUF_FIELD_OFFSET(::ClassificationDataRdy, centerindex_),
  PROTOBUF_FIELD_OFFSET(::ClassificationDataRdy, azimuth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DFstate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DFstate, dfstartstop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransferData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransferData, transferdatarange_),
  PROTOBUF_FIELD_OFFSET(::TransferData, transferaudio_),
  PROTOBUF_FIELD_OFFSET(::TransferData, transferpsd_),
  PROTOBUF_FIELD_OFFSET(::TransferData, transferdoa_),
  PROTOBUF_FIELD_OFFSET(::TransferData, transfersystemparameters_),
  PROTOBUF_FIELD_OFFSET(::TransferData, transferdfparameters_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DFarameters)},
  { 8, -1, sizeof(::SystemParameters)},
  { 23, -1, sizeof(::Frequency)},
  { 29, -1, sizeof(::Threshold)},
  { 35, -1, sizeof(::PSDDataRdyDOUBLE)},
  { 43, -1, sizeof(::PSDDataRdyINT)},
  { 50, -1, sizeof(::DOADataRdydouble)},
  { 58, -1, sizeof(::DOADataRdyshort)},
  { 65, -1, sizeof(::AudioDataRdy)},
  { 72, -1, sizeof(::AudioState)},
  { 78, -1, sizeof(::GPSParameter)},
  { 87, -1, sizeof(::AntennaState)},
  { 100, -1, sizeof(::AntennaOFFset)},
  { 113, -1, sizeof(::Defaults)},
  { 122, -1, sizeof(::ClassificationState)},
  { 128, -1, sizeof(::ClassificationDataRdy)},
  { 138, -1, sizeof(::DFstate)},
  { 144, -1, sizeof(::TransferData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DFarameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SystemParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Frequency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Threshold_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PSDDataRdyDOUBLE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PSDDataRdyINT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DOADataRdydouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DOADataRdyshort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AudioDataRdy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AudioState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GPSParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AntennaState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AntennaOFFset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Defaults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClassificationState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClassificationDataRdy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DFstate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransferData_default_instance_),
};

const char descriptor_table_protodef_Connection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Connection.proto\">\n\013DFarameters\022\017\n\007Azi"
  "muth\030\001 \001(\001\022\017\n\007Quality\030\002 \001(\001\022\r\n\005level\030\003 \001"
  "(\001\"\374\007\n\020SystemParameters\022&\n\007agcData\030\004 \001(\016"
  "2\025.SystemParameters.AGC\022\017\n\007mgcData\030\005 \001(\001"
  "\022(\n\006rfhead\030\006 \001(\0162\030.SystemParameters.RFHE"
  "AD\022&\n\005demod\030\007 \001(\0162\027.SystemParameters.DEM"
  "OD\022\'\n\003Fft\030\010 \001(\0162\032.SystemParameters.FFTPO"
  "INT\022\022\n\nSetSquelch\030\t \001(\010\022\016\n\006volume\030\n \001(\005\022"
  "\017\n\007Average\030\013 \001(\001\022.\n\tbandwidth\030\014 \001(\0162\033.Sy"
  "stemParameters.BANDWIDTH\022)\n\006filter\030\r \001(\016"
  "2\031.SystemParameters.FILTERS\"\032\n\003AGC\022\010\n\004FA"
  "ST\020\000\022\t\n\005RATED\020\001\"!\n\006RFHEAD\022\007\n\003ATT\020\000\022\006\n\002HL"
  "\020\001\022\006\n\002HS\020\002\"\037\n\005DEMOD\022\006\n\002AM\020\000\022\006\n\002FM\020\001\022\006\n\002P"
  "M\020\002\"*\n\010FFTPOINT\022\010\n\004_512\020\000\022\t\n\005_1024\020\001\022\t\n\005"
  "_2048\020\002\"\314\002\n\tBANDWIDTH\022\016\n\nDFBW_1_KHz\020\000\022\017\n"
  "\013DFBW_15_KHz\020\001\022\017\n\013DFBW_25_KHz\020\002\022\017\n\013DFBW_"
  "50_KHz\020\003\022\020\n\014DFBW_100_KHz\020\004\022\020\n\014DFBW_150_K"
  "Hz\020\005\022\020\n\014DFBW_250_KHz\020\006\022\020\n\014DFBW_500_KHz\020\007"
  "\022\016\n\nDFBW_1_MHz\020\010\022\020\n\014DFBW_1M5_MHz\020\t\022\016\n\nDF"
  "BW_2_MHz\020\n\022\016\n\nDFBW_4_MHz\020\013\022\017\n\013DFBW_33_MH"
  "z\020\014\022\017\n\013DFBW_10_MHz\020\r\022\017\n\013DFBW_20_MHz\020\016\022\020\n"
  "\014DFBW_200_KHz\020\017\022\013\n\007DFBW_WB\020\020\022\017\n\013DFBW_40_"
  "MHz\020(\022\017\n\013DFBW_80_MHz\020P\"\310\001\n\007FILTERS\022\014\n\010Wi"
  "deBand\020\000\022\n\n\006_100Hz\020\001\022\n\n\006_300Hz\020\002\022\n\n\006_600"
  "Hz\020\003\022\t\n\005_1KHz\020\004\022\r\n\t_1AND5KHz\020\005\022\t\n\005_2KHz\020"
  "\006\022\t\n\005_3KHz\020\007\022\013\n\007_7_5KHz\020\010\022\n\n\006_15KHz\020\t\022\n\n"
  "\006_30KHz\020\n\022\n\n\006_50KHz\020\013\022\013\n\007_120KHz\020\014\022\013\n\007_1"
  "50KHz\020\r\022\020\n\014Filter_Count\020\016\"\031\n\tFrequency\022\014"
  "\n\004freq\030\016 \001(\001\"\030\n\tThreshold\022\013\n\003thr\030\017 \001(\001\"@"
  "\n\020PSDDataRdyDOUBLE\022\r\n\004type\030\350\007 \001(\t\022\014\n\004siz"
  "e\030\020 \001(\005\022\017\n\007PsdData\030\021 \003(\001\".\n\rPSDDataRdyIN"
  "T\022\014\n\004size\030\022 \001(\005\022\017\n\007PsdData\030\023 \003(\005\"@\n\020DOAD"
  "ataRdydouble\022\r\n\004type\030\351\007 \001(\t\022\014\n\004size\030\024 \001("
  "\005\022\017\n\007DOAData\030\025 \003(\001\"0\n\017DOADataRdyshort\022\014\n"
  "\004size\030\026 \001(\005\022\017\n\007DoaData\030\027 \003(\005\"/\n\014AudioDat"
  "aRdy\022\014\n\004size\030\030 \001(\005\022\021\n\tAudioData\030\031 \003(\014\"\033\n"
  "\nAudioState\022\r\n\005audio\030\032 \001(\010\"Q\n\014GPSParamet"
  "er\022\013\n\003Lat\030\033 \001(\001\022\014\n\004long\030\034 \001(\001\022\025\n\rcompass"
  "Offset\030\035 \001(\001\022\017\n\007azimuth\030\036 \001(\001\"\216\001\n\014Antenn"
  "aState\022\016\n\006ADD050\030\037 \001(\010\022\016\n\006ADD150\030  \001(\010\022\016"
  "\n\006ADD078\030! \001(\010\022\016\n\006ADD070\030\" \001(\010\022\016\n\006ADD327"
  "\030# \001(\010\022\016\n\006ADD207\030$ \001(\010\022\016\n\006ADD107\030% \001(\010\022\016"
  "\n\006ADD227\030& \001(\010\"\217\001\n\rAntennaOFFset\022\016\n\006ADD0"
  "50\030\' \001(\001\022\016\n\006ADD150\030( \001(\001\022\016\n\006ADD078\030) \001(\001"
  "\022\016\n\006ADD070\030* \001(\001\022\016\n\006ADD327\030+ \001(\001\022\016\n\006ADD2"
  "07\030, \001(\001\022\016\n\006ADD107\030- \001(\001\022\016\n\006ADD227\030. \001(\001"
  "\"\335\001\n\010Defaults\022(\n\nsystemtype\030/ \001(\0162\024.Defa"
  "ults.SYSTEMTYPE\022%\n\017WideBandBanwith\0300 \001(\016"
  "2\014.Defaults.BW\022\030\n\020MinimumFreqRange\0301 \001(\005"
  "\022\030\n\020MaximumFreqRange\0302 \001(\005\".\n\nSYSTEMTYPE"
  "\022\t\n\005mobin\020\000\022\t\n\005miadI\020\001\022\n\n\006miadII\020\002\"\034\n\002BW"
  "\022\n\n\006_20MHz\020\000\022\n\n\006_40MHz\020\001\"$\n\023Classificati"
  "onState\022\r\n\005state\0303 \001(\010\"\307\001\n\025Classificatio"
  "nDataRdy\0225\n\nSignalMode\0304 \001(\0162!.Classific"
  "ationDataRdy.SINGALMODE\022\022\n\nstartIndex\0305 "
  "\001(\005\022\021\n\tStopIndex\0306 \001(\005\022\023\n\013CenterIndex\0307 "
  "\001(\005\022\017\n\007Azimuth\0308 \001(\001\"*\n\nSINGALMODE\022\007\n\003Fi"
  "x\020\000\022\006\n\002DS\020\001\022\013\n\007Hopping\020\002\"\036\n\007DFstate\022\023\n\013D"
  "FStartStop\0309 \001(\010\"\241\002\n\014TransferData\0222\n\021Tra"
  "nsferDataRange\030: \001(\0162\027.TransferData.TRAN"
  "SDATA\022\025\n\rTransferAudio\030; \001(\010\022\023\n\013Transfer"
  "PSD\030< \001(\010\022\023\n\013TransferDOA\030= \001(\010\022 \n\030Transf"
  "erSystemParameters\030> \001(\010\022\034\n\024TransferDFPa"
  "rameters\030\? \001(\010\"\\\n\tTRANSDATA\022\016\n\n_10Percen"
  "t\020\000\022\016\n\n_20Percent\020\002\022\016\n\n_50Percent\020\003\022\016\n\n_"
  "75Percent\020\004\022\017\n\013_100Percent\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Connection_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Connection_2eproto_sccs[18] = {
  &scc_info_AntennaOFFset_Connection_2eproto.base,
  &scc_info_AntennaState_Connection_2eproto.base,
  &scc_info_AudioDataRdy_Connection_2eproto.base,
  &scc_info_AudioState_Connection_2eproto.base,
  &scc_info_ClassificationDataRdy_Connection_2eproto.base,
  &scc_info_ClassificationState_Connection_2eproto.base,
  &scc_info_DFarameters_Connection_2eproto.base,
  &scc_info_DFstate_Connection_2eproto.base,
  &scc_info_DOADataRdydouble_Connection_2eproto.base,
  &scc_info_DOADataRdyshort_Connection_2eproto.base,
  &scc_info_Defaults_Connection_2eproto.base,
  &scc_info_Frequency_Connection_2eproto.base,
  &scc_info_GPSParameter_Connection_2eproto.base,
  &scc_info_PSDDataRdyDOUBLE_Connection_2eproto.base,
  &scc_info_PSDDataRdyINT_Connection_2eproto.base,
  &scc_info_SystemParameters_Connection_2eproto.base,
  &scc_info_Threshold_Connection_2eproto.base,
  &scc_info_TransferData_Connection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Connection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Connection_2eproto = {
  false, false, descriptor_table_protodef_Connection_2eproto, "Connection.proto", 2636,
  &descriptor_table_Connection_2eproto_once, descriptor_table_Connection_2eproto_sccs, descriptor_table_Connection_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_Connection_2eproto::offsets,
  file_level_metadata_Connection_2eproto, 18, file_level_enum_descriptors_Connection_2eproto, file_level_service_descriptors_Connection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Connection_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Connection_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_AGC_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Connection_2eproto);
  return file_level_enum_descriptors_Connection_2eproto[0];
}
bool SystemParameters_AGC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemParameters_AGC SystemParameters::FAST;
constexpr SystemParameters_AGC SystemParameters::RATED;
constexpr SystemParameters_AGC SystemParameters::AGC_MIN;
constexpr SystemParameters_AGC SystemParameters::AGC_MAX;
constexpr int SystemParameters::AGC_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_RFHEAD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Connection_2eproto);
  return file_level_enum_descriptors_Connection_2eproto[1];
}
bool SystemParameters_RFHEAD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemParameters_RFHEAD SystemParameters::ATT;
constexpr SystemParameters_RFHEAD SystemParameters::HL;
constexpr SystemParameters_RFHEAD SystemParameters::HS;
constexpr SystemParameters_RFHEAD SystemParameters::RFHEAD_MIN;
constexpr SystemParameters_RFHEAD SystemParameters::RFHEAD_MAX;
constexpr int SystemParameters::RFHEAD_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_DEMOD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Connection_2eproto);
  return file_level_enum_descriptors_Connection_2eproto[2];
}
bool SystemParameters_DEMOD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemParameters_DEMOD SystemParameters::AM;
constexpr SystemParameters_DEMOD SystemParameters::FM;
constexpr SystemParameters_DEMOD SystemParameters::PM;
constexpr SystemParameters_DEMOD SystemParameters::DEMOD_MIN;
constexpr SystemParameters_DEMOD SystemParameters::DEMOD_MAX;
constexpr int SystemParameters::DEMOD_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_FFTPOINT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Connection_2eproto);
  return file_level_enum_descriptors_Connection_2eproto[3];
}
bool SystemParameters_FFTPOINT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemParameters_FFTPOINT SystemParameters::_512;
constexpr SystemParameters_FFTPOINT SystemParameters::_1024;
constexpr SystemParameters_FFTPOINT SystemParameters::_2048;
constexpr SystemParameters_FFTPOINT SystemParameters::FFTPOINT_MIN;
constexpr SystemParameters_FFTPOINT SystemParameters::FFTPOINT_MAX;
constexpr int SystemParameters::FFTPOINT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_BANDWIDTH_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Connection_2eproto);
  return file_level_enum_descriptors_Connection_2eproto[4];
}
bool SystemParameters_BANDWIDTH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 40:
    case 80:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_1_KHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_15_KHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_25_KHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_50_KHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_100_KHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_150_KHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_250_KHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_500_KHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_1_MHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_1M5_MHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_2_MHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_4_MHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_33_MHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_10_MHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_20_MHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_200_KHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_WB;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_40_MHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::DFBW_80_MHz;
constexpr SystemParameters_BANDWIDTH SystemParameters::BANDWIDTH_MIN;
constexpr SystemParameters_BANDWIDTH SystemParameters::BANDWIDTH_MAX;
constexpr int SystemParameters::BANDWIDTH_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_FILTERS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Connection_2eproto);
  return file_level_enum_descriptors_Connection_2eproto[5];
}
bool SystemParameters_FILTERS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemParameters_FILTERS SystemParameters::WideBand;
constexpr SystemParameters_FILTERS SystemParameters::_100Hz;
constexpr SystemParameters_FILTERS SystemParameters::_300Hz;
constexpr SystemParameters_FILTERS SystemParameters::_600Hz;
constexpr SystemParameters_FILTERS SystemParameters::_1KHz;
constexpr SystemParameters_FILTERS SystemParameters::_1AND5KHz;
constexpr SystemParameters_FILTERS SystemParameters::_2KHz;
constexpr SystemParameters_FILTERS SystemParameters::_3KHz;
constexpr SystemParameters_FILTERS SystemParameters::_7_5KHz;
constexpr SystemParameters_FILTERS SystemParameters::_15KHz;
constexpr SystemParameters_FILTERS SystemParameters::_30KHz;
constexpr SystemParameters_FILTERS SystemParameters::_50KHz;
constexpr SystemParameters_FILTERS SystemParameters::_120KHz;
constexpr SystemParameters_FILTERS SystemParameters::_150KHz;
constexpr SystemParameters_FILTERS SystemParameters::Filter_Count;
constexpr SystemParameters_FILTERS SystemParameters::FILTERS_MIN;
constexpr SystemParameters_FILTERS SystemParameters::FILTERS_MAX;
constexpr int SystemParameters::FILTERS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Defaults_SYSTEMTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Connection_2eproto);
  return file_level_enum_descriptors_Connection_2eproto[6];
}
bool Defaults_SYSTEMTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Defaults_SYSTEMTYPE Defaults::mobin;
constexpr Defaults_SYSTEMTYPE Defaults::miadI;
constexpr Defaults_SYSTEMTYPE Defaults::miadII;
constexpr Defaults_SYSTEMTYPE Defaults::SYSTEMTYPE_MIN;
constexpr Defaults_SYSTEMTYPE Defaults::SYSTEMTYPE_MAX;
constexpr int Defaults::SYSTEMTYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Defaults_BW_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Connection_2eproto);
  return file_level_enum_descriptors_Connection_2eproto[7];
}
bool Defaults_BW_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Defaults_BW Defaults::_20MHz;
constexpr Defaults_BW Defaults::_40MHz;
constexpr Defaults_BW Defaults::BW_MIN;
constexpr Defaults_BW Defaults::BW_MAX;
constexpr int Defaults::BW_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClassificationDataRdy_SINGALMODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Connection_2eproto);
  return file_level_enum_descriptors_Connection_2eproto[8];
}
bool ClassificationDataRdy_SINGALMODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClassificationDataRdy_SINGALMODE ClassificationDataRdy::Fix;
constexpr ClassificationDataRdy_SINGALMODE ClassificationDataRdy::DS;
constexpr ClassificationDataRdy_SINGALMODE ClassificationDataRdy::Hopping;
constexpr ClassificationDataRdy_SINGALMODE ClassificationDataRdy::SINGALMODE_MIN;
constexpr ClassificationDataRdy_SINGALMODE ClassificationDataRdy::SINGALMODE_MAX;
constexpr int ClassificationDataRdy::SINGALMODE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferData_TRANSDATA_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Connection_2eproto);
  return file_level_enum_descriptors_Connection_2eproto[9];
}
bool TransferData_TRANSDATA_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransferData_TRANSDATA TransferData::_10Percent;
constexpr TransferData_TRANSDATA TransferData::_20Percent;
constexpr TransferData_TRANSDATA TransferData::_50Percent;
constexpr TransferData_TRANSDATA TransferData::_75Percent;
constexpr TransferData_TRANSDATA TransferData::_100Percent;
constexpr TransferData_TRANSDATA TransferData::TRANSDATA_MIN;
constexpr TransferData_TRANSDATA TransferData::TRANSDATA_MAX;
constexpr int TransferData::TRANSDATA_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DFarameters::InitAsDefaultInstance() {
}
class DFarameters::_Internal {
 public:
};

DFarameters::DFarameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DFarameters)
}
DFarameters::DFarameters(const DFarameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&azimuth_, &from.azimuth_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&azimuth_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:DFarameters)
}

void DFarameters::SharedCtor() {
  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(level_));
}

DFarameters::~DFarameters() {
  // @@protoc_insertion_point(destructor:DFarameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DFarameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DFarameters::ArenaDtor(void* object) {
  DFarameters* _this = reinterpret_cast< DFarameters* >(object);
  (void)_this;
}
void DFarameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DFarameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DFarameters& DFarameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DFarameters_Connection_2eproto.base);
  return *internal_default_instance();
}


void DFarameters::Clear() {
// @@protoc_insertion_point(message_clear_start:DFarameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DFarameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double Azimuth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DFarameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DFarameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_azimuth(), target);
  }

  // double Quality = 2;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_quality(), target);
  }

  // double level = 3;
  if (!(this->level() <= 0 && this->level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DFarameters)
  return target;
}

size_t DFarameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DFarameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    total_size += 1 + 8;
  }

  // double Quality = 2;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    total_size += 1 + 8;
  }

  // double level = 3;
  if (!(this->level() <= 0 && this->level() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DFarameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DFarameters)
  GOOGLE_DCHECK_NE(&from, this);
  const DFarameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DFarameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DFarameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DFarameters)
    MergeFrom(*source);
  }
}

void DFarameters::MergeFrom(const DFarameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DFarameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.azimuth() <= 0 && from.azimuth() >= 0)) {
    _internal_set_azimuth(from._internal_azimuth());
  }
  if (!(from.quality() <= 0 && from.quality() >= 0)) {
    _internal_set_quality(from._internal_quality());
  }
  if (!(from.level() <= 0 && from.level() >= 0)) {
    _internal_set_level(from._internal_level());
  }
}

void DFarameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DFarameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DFarameters::CopyFrom(const DFarameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DFarameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFarameters::IsInitialized() const {
  return true;
}

void DFarameters::InternalSwap(DFarameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DFarameters, level_)
      + sizeof(DFarameters::level_)
      - PROTOBUF_FIELD_OFFSET(DFarameters, azimuth_)>(
          reinterpret_cast<char*>(&azimuth_),
          reinterpret_cast<char*>(&other->azimuth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DFarameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SystemParameters::InitAsDefaultInstance() {
}
class SystemParameters::_Internal {
 public:
};

SystemParameters::SystemParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SystemParameters)
}
SystemParameters::SystemParameters(const SystemParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mgcdata_, &from.mgcdata_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_) -
    reinterpret_cast<char*>(&mgcdata_)) + sizeof(filter_));
  // @@protoc_insertion_point(copy_constructor:SystemParameters)
}

void SystemParameters::SharedCtor() {
  ::memset(&mgcdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_) -
      reinterpret_cast<char*>(&mgcdata_)) + sizeof(filter_));
}

SystemParameters::~SystemParameters() {
  // @@protoc_insertion_point(destructor:SystemParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SystemParameters::ArenaDtor(void* object) {
  SystemParameters* _this = reinterpret_cast< SystemParameters* >(object);
  (void)_this;
}
void SystemParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemParameters& SystemParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemParameters_Connection_2eproto.base);
  return *internal_default_instance();
}


void SystemParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:SystemParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mgcdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_) -
      reinterpret_cast<char*>(&mgcdata_)) + sizeof(filter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SystemParameters.AGC agcData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_agcdata(static_cast<::SystemParameters_AGC>(val));
        } else goto handle_unusual;
        continue;
      // double mgcData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          mgcdata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .SystemParameters.RFHEAD rfhead = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rfhead(static_cast<::SystemParameters_RFHEAD>(val));
        } else goto handle_unusual;
        continue;
      // .SystemParameters.DEMOD demod = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_demod(static_cast<::SystemParameters_DEMOD>(val));
        } else goto handle_unusual;
        continue;
      // .SystemParameters.FFTPOINT Fft = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fft(static_cast<::SystemParameters_FFTPOINT>(val));
        } else goto handle_unusual;
        continue;
      // bool SetSquelch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          setsquelch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Average = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          average_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .SystemParameters.BANDWIDTH bandwidth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bandwidth(static_cast<::SystemParameters_BANDWIDTH>(val));
        } else goto handle_unusual;
        continue;
      // .SystemParameters.FILTERS filter = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filter(static_cast<::SystemParameters_FILTERS>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SystemParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SystemParameters.AGC agcData = 4;
  if (this->agcdata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_agcdata(), target);
  }

  // double mgcData = 5;
  if (!(this->mgcdata() <= 0 && this->mgcdata() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_mgcdata(), target);
  }

  // .SystemParameters.RFHEAD rfhead = 6;
  if (this->rfhead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_rfhead(), target);
  }

  // .SystemParameters.DEMOD demod = 7;
  if (this->demod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_demod(), target);
  }

  // .SystemParameters.FFTPOINT Fft = 8;
  if (this->fft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_fft(), target);
  }

  // bool SetSquelch = 9;
  if (this->setsquelch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_setsquelch(), target);
  }

  // int32 volume = 10;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_volume(), target);
  }

  // double Average = 11;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_average(), target);
  }

  // .SystemParameters.BANDWIDTH bandwidth = 12;
  if (this->bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_bandwidth(), target);
  }

  // .SystemParameters.FILTERS filter = 13;
  if (this->filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SystemParameters)
  return target;
}

size_t SystemParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SystemParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mgcData = 5;
  if (!(this->mgcdata() <= 0 && this->mgcdata() >= 0)) {
    total_size += 1 + 8;
  }

  // .SystemParameters.AGC agcData = 4;
  if (this->agcdata() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_agcdata());
  }

  // .SystemParameters.RFHEAD rfhead = 6;
  if (this->rfhead() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rfhead());
  }

  // .SystemParameters.DEMOD demod = 7;
  if (this->demod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_demod());
  }

  // .SystemParameters.FFTPOINT Fft = 8;
  if (this->fft() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fft());
  }

  // bool SetSquelch = 9;
  if (this->setsquelch() != 0) {
    total_size += 1 + 1;
  }

  // int32 volume = 10;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_volume());
  }

  // double Average = 11;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    total_size += 1 + 8;
  }

  // .SystemParameters.BANDWIDTH bandwidth = 12;
  if (this->bandwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bandwidth());
  }

  // .SystemParameters.FILTERS filter = 13;
  if (this->filter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SystemParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SystemParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SystemParameters)
    MergeFrom(*source);
  }
}

void SystemParameters::MergeFrom(const SystemParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SystemParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.mgcdata() <= 0 && from.mgcdata() >= 0)) {
    _internal_set_mgcdata(from._internal_mgcdata());
  }
  if (from.agcdata() != 0) {
    _internal_set_agcdata(from._internal_agcdata());
  }
  if (from.rfhead() != 0) {
    _internal_set_rfhead(from._internal_rfhead());
  }
  if (from.demod() != 0) {
    _internal_set_demod(from._internal_demod());
  }
  if (from.fft() != 0) {
    _internal_set_fft(from._internal_fft());
  }
  if (from.setsquelch() != 0) {
    _internal_set_setsquelch(from._internal_setsquelch());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.average() <= 0 && from.average() >= 0)) {
    _internal_set_average(from._internal_average());
  }
  if (from.bandwidth() != 0) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  if (from.filter() != 0) {
    _internal_set_filter(from._internal_filter());
  }
}

void SystemParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SystemParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemParameters::CopyFrom(const SystemParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SystemParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemParameters::IsInitialized() const {
  return true;
}

void SystemParameters::InternalSwap(SystemParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemParameters, filter_)
      + sizeof(SystemParameters::filter_)
      - PROTOBUF_FIELD_OFFSET(SystemParameters, mgcdata_)>(
          reinterpret_cast<char*>(&mgcdata_),
          reinterpret_cast<char*>(&other->mgcdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Frequency::InitAsDefaultInstance() {
}
class Frequency::_Internal {
 public:
};

Frequency::Frequency(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Frequency)
}
Frequency::Frequency(const Frequency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  freq_ = from.freq_;
  // @@protoc_insertion_point(copy_constructor:Frequency)
}

void Frequency::SharedCtor() {
  freq_ = 0;
}

Frequency::~Frequency() {
  // @@protoc_insertion_point(destructor:Frequency)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Frequency::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Frequency::ArenaDtor(void* object) {
  Frequency* _this = reinterpret_cast< Frequency* >(object);
  (void)_this;
}
void Frequency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frequency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frequency& Frequency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Frequency_Connection_2eproto.base);
  return *internal_default_instance();
}


void Frequency::Clear() {
// @@protoc_insertion_point(message_clear_start:Frequency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freq_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frequency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double freq = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frequency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Frequency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double freq = 14;
  if (!(this->freq() <= 0 && this->freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Frequency)
  return target;
}

size_t Frequency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Frequency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double freq = 14;
  if (!(this->freq() <= 0 && this->freq() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frequency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Frequency)
  GOOGLE_DCHECK_NE(&from, this);
  const Frequency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frequency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Frequency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Frequency)
    MergeFrom(*source);
  }
}

void Frequency::MergeFrom(const Frequency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Frequency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.freq() <= 0 && from.freq() >= 0)) {
    _internal_set_freq(from._internal_freq());
  }
}

void Frequency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Frequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frequency::CopyFrom(const Frequency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Frequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frequency::IsInitialized() const {
  return true;
}

void Frequency::InternalSwap(Frequency* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(freq_, other->freq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Frequency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Threshold::InitAsDefaultInstance() {
}
class Threshold::_Internal {
 public:
};

Threshold::Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Threshold)
}
Threshold::Threshold(const Threshold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thr_ = from.thr_;
  // @@protoc_insertion_point(copy_constructor:Threshold)
}

void Threshold::SharedCtor() {
  thr_ = 0;
}

Threshold::~Threshold() {
  // @@protoc_insertion_point(destructor:Threshold)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Threshold::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Threshold::ArenaDtor(void* object) {
  Threshold* _this = reinterpret_cast< Threshold* >(object);
  (void)_this;
}
void Threshold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Threshold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Threshold& Threshold::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Threshold_Connection_2eproto.base);
  return *internal_default_instance();
}


void Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:Threshold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thr_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Threshold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double thr = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          thr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Threshold::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Threshold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double thr = 15;
  if (!(this->thr() <= 0 && this->thr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_thr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Threshold)
  return target;
}

size_t Threshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Threshold)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double thr = 15;
  if (!(this->thr() <= 0 && this->thr() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Threshold::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  const Threshold* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Threshold>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Threshold)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Threshold)
    MergeFrom(*source);
  }
}

void Threshold::MergeFrom(const Threshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.thr() <= 0 && from.thr() >= 0)) {
    _internal_set_thr(from._internal_thr());
  }
}

void Threshold::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Threshold::CopyFrom(const Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Threshold::IsInitialized() const {
  return true;
}

void Threshold::InternalSwap(Threshold* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(thr_, other->thr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Threshold::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PSDDataRdyDOUBLE::InitAsDefaultInstance() {
}
class PSDDataRdyDOUBLE::_Internal {
 public:
};

PSDDataRdyDOUBLE::PSDDataRdyDOUBLE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  psddata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PSDDataRdyDOUBLE)
}
PSDDataRdyDOUBLE::PSDDataRdyDOUBLE(const PSDDataRdyDOUBLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      psddata_(from.psddata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:PSDDataRdyDOUBLE)
}

void PSDDataRdyDOUBLE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PSDDataRdyDOUBLE_Connection_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

PSDDataRdyDOUBLE::~PSDDataRdyDOUBLE() {
  // @@protoc_insertion_point(destructor:PSDDataRdyDOUBLE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PSDDataRdyDOUBLE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PSDDataRdyDOUBLE::ArenaDtor(void* object) {
  PSDDataRdyDOUBLE* _this = reinterpret_cast< PSDDataRdyDOUBLE* >(object);
  (void)_this;
}
void PSDDataRdyDOUBLE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PSDDataRdyDOUBLE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PSDDataRdyDOUBLE& PSDDataRdyDOUBLE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PSDDataRdyDOUBLE_Connection_2eproto.base);
  return *internal_default_instance();
}


void PSDDataRdyDOUBLE::Clear() {
// @@protoc_insertion_point(message_clear_start:PSDDataRdyDOUBLE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  psddata_.Clear();
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSDDataRdyDOUBLE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double PsdData = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_psddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137) {
          _internal_add_psddata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string type = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PSDDataRdyDOUBLE.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PSDDataRdyDOUBLE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSDDataRdyDOUBLE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 16;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_size(), target);
  }

  // repeated double PsdData = 17;
  if (this->_internal_psddata_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_psddata(), target);
  }

  // string type = 1000;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PSDDataRdyDOUBLE.type");
    target = stream->WriteStringMaybeAliased(
        1000, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PSDDataRdyDOUBLE)
  return target;
}

size_t PSDDataRdyDOUBLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PSDDataRdyDOUBLE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double PsdData = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_psddata_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _psddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string type = 1000;
  if (this->type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 size = 16;
  if (this->size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PSDDataRdyDOUBLE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PSDDataRdyDOUBLE)
  GOOGLE_DCHECK_NE(&from, this);
  const PSDDataRdyDOUBLE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PSDDataRdyDOUBLE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PSDDataRdyDOUBLE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PSDDataRdyDOUBLE)
    MergeFrom(*source);
  }
}

void PSDDataRdyDOUBLE::MergeFrom(const PSDDataRdyDOUBLE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PSDDataRdyDOUBLE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  psddata_.MergeFrom(from.psddata_);
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void PSDDataRdyDOUBLE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PSDDataRdyDOUBLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSDDataRdyDOUBLE::CopyFrom(const PSDDataRdyDOUBLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PSDDataRdyDOUBLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSDDataRdyDOUBLE::IsInitialized() const {
  return true;
}

void PSDDataRdyDOUBLE::InternalSwap(PSDDataRdyDOUBLE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  psddata_.InternalSwap(&other->psddata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PSDDataRdyDOUBLE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PSDDataRdyINT::InitAsDefaultInstance() {
}
class PSDDataRdyINT::_Internal {
 public:
};

PSDDataRdyINT::PSDDataRdyINT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  psddata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PSDDataRdyINT)
}
PSDDataRdyINT::PSDDataRdyINT(const PSDDataRdyINT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      psddata_(from.psddata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:PSDDataRdyINT)
}

void PSDDataRdyINT::SharedCtor() {
  size_ = 0;
}

PSDDataRdyINT::~PSDDataRdyINT() {
  // @@protoc_insertion_point(destructor:PSDDataRdyINT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PSDDataRdyINT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PSDDataRdyINT::ArenaDtor(void* object) {
  PSDDataRdyINT* _this = reinterpret_cast< PSDDataRdyINT* >(object);
  (void)_this;
}
void PSDDataRdyINT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PSDDataRdyINT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PSDDataRdyINT& PSDDataRdyINT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PSDDataRdyINT_Connection_2eproto.base);
  return *internal_default_instance();
}


void PSDDataRdyINT::Clear() {
// @@protoc_insertion_point(message_clear_start:PSDDataRdyINT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  psddata_.Clear();
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSDDataRdyINT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 PsdData = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_psddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          _internal_add_psddata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PSDDataRdyINT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSDDataRdyINT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 18;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_size(), target);
  }

  // repeated int32 PsdData = 19;
  {
    int byte_size = _psddata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          19, _internal_psddata(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PSDDataRdyINT)
  return target;
}

size_t PSDDataRdyINT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PSDDataRdyINT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 PsdData = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->psddata_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _psddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 size = 18;
  if (this->size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PSDDataRdyINT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PSDDataRdyINT)
  GOOGLE_DCHECK_NE(&from, this);
  const PSDDataRdyINT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PSDDataRdyINT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PSDDataRdyINT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PSDDataRdyINT)
    MergeFrom(*source);
  }
}

void PSDDataRdyINT::MergeFrom(const PSDDataRdyINT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PSDDataRdyINT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  psddata_.MergeFrom(from.psddata_);
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void PSDDataRdyINT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PSDDataRdyINT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSDDataRdyINT::CopyFrom(const PSDDataRdyINT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PSDDataRdyINT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSDDataRdyINT::IsInitialized() const {
  return true;
}

void PSDDataRdyINT::InternalSwap(PSDDataRdyINT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  psddata_.InternalSwap(&other->psddata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PSDDataRdyINT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DOADataRdydouble::InitAsDefaultInstance() {
}
class DOADataRdydouble::_Internal {
 public:
};

DOADataRdydouble::DOADataRdydouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  doadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DOADataRdydouble)
}
DOADataRdydouble::DOADataRdydouble(const DOADataRdydouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      doadata_(from.doadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:DOADataRdydouble)
}

void DOADataRdydouble::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DOADataRdydouble_Connection_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

DOADataRdydouble::~DOADataRdydouble() {
  // @@protoc_insertion_point(destructor:DOADataRdydouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DOADataRdydouble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DOADataRdydouble::ArenaDtor(void* object) {
  DOADataRdydouble* _this = reinterpret_cast< DOADataRdydouble* >(object);
  (void)_this;
}
void DOADataRdydouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DOADataRdydouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DOADataRdydouble& DOADataRdydouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DOADataRdydouble_Connection_2eproto.base);
  return *internal_default_instance();
}


void DOADataRdydouble::Clear() {
// @@protoc_insertion_point(message_clear_start:DOADataRdydouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doadata_.Clear();
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DOADataRdydouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double DOAData = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_doadata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169) {
          _internal_add_doadata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string type = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DOADataRdydouble.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DOADataRdydouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DOADataRdydouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 20;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_size(), target);
  }

  // repeated double DOAData = 21;
  if (this->_internal_doadata_size() > 0) {
    target = stream->WriteFixedPacked(21, _internal_doadata(), target);
  }

  // string type = 1001;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DOADataRdydouble.type");
    target = stream->WriteStringMaybeAliased(
        1001, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DOADataRdydouble)
  return target;
}

size_t DOADataRdydouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DOADataRdydouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double DOAData = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_doadata_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _doadata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string type = 1001;
  if (this->type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 size = 20;
  if (this->size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DOADataRdydouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DOADataRdydouble)
  GOOGLE_DCHECK_NE(&from, this);
  const DOADataRdydouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DOADataRdydouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DOADataRdydouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DOADataRdydouble)
    MergeFrom(*source);
  }
}

void DOADataRdydouble::MergeFrom(const DOADataRdydouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DOADataRdydouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doadata_.MergeFrom(from.doadata_);
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void DOADataRdydouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DOADataRdydouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DOADataRdydouble::CopyFrom(const DOADataRdydouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DOADataRdydouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DOADataRdydouble::IsInitialized() const {
  return true;
}

void DOADataRdydouble::InternalSwap(DOADataRdydouble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  doadata_.InternalSwap(&other->doadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DOADataRdydouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DOADataRdyshort::InitAsDefaultInstance() {
}
class DOADataRdyshort::_Internal {
 public:
};

DOADataRdyshort::DOADataRdyshort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  doadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DOADataRdyshort)
}
DOADataRdyshort::DOADataRdyshort(const DOADataRdyshort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      doadata_(from.doadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:DOADataRdyshort)
}

void DOADataRdyshort::SharedCtor() {
  size_ = 0;
}

DOADataRdyshort::~DOADataRdyshort() {
  // @@protoc_insertion_point(destructor:DOADataRdyshort)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DOADataRdyshort::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DOADataRdyshort::ArenaDtor(void* object) {
  DOADataRdyshort* _this = reinterpret_cast< DOADataRdyshort* >(object);
  (void)_this;
}
void DOADataRdyshort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DOADataRdyshort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DOADataRdyshort& DOADataRdyshort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DOADataRdyshort_Connection_2eproto.base);
  return *internal_default_instance();
}


void DOADataRdyshort::Clear() {
// @@protoc_insertion_point(message_clear_start:DOADataRdyshort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doadata_.Clear();
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DOADataRdyshort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 DoaData = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_doadata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184) {
          _internal_add_doadata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DOADataRdyshort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DOADataRdyshort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 22;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_size(), target);
  }

  // repeated int32 DoaData = 23;
  {
    int byte_size = _doadata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          23, _internal_doadata(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DOADataRdyshort)
  return target;
}

size_t DOADataRdyshort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DOADataRdyshort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 DoaData = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->doadata_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _doadata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 size = 22;
  if (this->size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DOADataRdyshort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DOADataRdyshort)
  GOOGLE_DCHECK_NE(&from, this);
  const DOADataRdyshort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DOADataRdyshort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DOADataRdyshort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DOADataRdyshort)
    MergeFrom(*source);
  }
}

void DOADataRdyshort::MergeFrom(const DOADataRdyshort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DOADataRdyshort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doadata_.MergeFrom(from.doadata_);
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void DOADataRdyshort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DOADataRdyshort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DOADataRdyshort::CopyFrom(const DOADataRdyshort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DOADataRdyshort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DOADataRdyshort::IsInitialized() const {
  return true;
}

void DOADataRdyshort::InternalSwap(DOADataRdyshort* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  doadata_.InternalSwap(&other->doadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DOADataRdyshort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioDataRdy::InitAsDefaultInstance() {
}
class AudioDataRdy::_Internal {
 public:
};

AudioDataRdy::AudioDataRdy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  audiodata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AudioDataRdy)
}
AudioDataRdy::AudioDataRdy(const AudioDataRdy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      audiodata_(from.audiodata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:AudioDataRdy)
}

void AudioDataRdy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioDataRdy_Connection_2eproto.base);
  size_ = 0;
}

AudioDataRdy::~AudioDataRdy() {
  // @@protoc_insertion_point(destructor:AudioDataRdy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioDataRdy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioDataRdy::ArenaDtor(void* object) {
  AudioDataRdy* _this = reinterpret_cast< AudioDataRdy* >(object);
  (void)_this;
}
void AudioDataRdy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioDataRdy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioDataRdy& AudioDataRdy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioDataRdy_Connection_2eproto.base);
  return *internal_default_instance();
}


void AudioDataRdy::Clear() {
// @@protoc_insertion_point(message_clear_start:AudioDataRdy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audiodata_.Clear();
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioDataRdy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes AudioData = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_audiodata();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioDataRdy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AudioDataRdy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 24;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_size(), target);
  }

  // repeated bytes AudioData = 25;
  for (int i = 0, n = this->_internal_audiodata_size(); i < n; i++) {
    const auto& s = this->_internal_audiodata(i);
    target = stream->WriteBytes(25, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AudioDataRdy)
  return target;
}

size_t AudioDataRdy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AudioDataRdy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes AudioData = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(audiodata_.size());
  for (int i = 0, n = audiodata_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      audiodata_.Get(i));
  }

  // int32 size = 24;
  if (this->size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioDataRdy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AudioDataRdy)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioDataRdy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioDataRdy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AudioDataRdy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AudioDataRdy)
    MergeFrom(*source);
  }
}

void AudioDataRdy::MergeFrom(const AudioDataRdy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AudioDataRdy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  audiodata_.MergeFrom(from.audiodata_);
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void AudioDataRdy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AudioDataRdy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioDataRdy::CopyFrom(const AudioDataRdy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AudioDataRdy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioDataRdy::IsInitialized() const {
  return true;
}

void AudioDataRdy::InternalSwap(AudioDataRdy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  audiodata_.InternalSwap(&other->audiodata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioDataRdy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioState::InitAsDefaultInstance() {
}
class AudioState::_Internal {
 public:
};

AudioState::AudioState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AudioState)
}
AudioState::AudioState(const AudioState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audio_ = from.audio_;
  // @@protoc_insertion_point(copy_constructor:AudioState)
}

void AudioState::SharedCtor() {
  audio_ = false;
}

AudioState::~AudioState() {
  // @@protoc_insertion_point(destructor:AudioState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioState::ArenaDtor(void* object) {
  AudioState* _this = reinterpret_cast< AudioState* >(object);
  (void)_this;
}
void AudioState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioState& AudioState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioState_Connection_2eproto.base);
  return *internal_default_instance();
}


void AudioState::Clear() {
// @@protoc_insertion_point(message_clear_start:AudioState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool audio = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AudioState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool audio = 26;
  if (this->audio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_audio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AudioState)
  return target;
}

size_t AudioState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AudioState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool audio = 26;
  if (this->audio() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AudioState)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AudioState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AudioState)
    MergeFrom(*source);
  }
}

void AudioState::MergeFrom(const AudioState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AudioState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio() != 0) {
    _internal_set_audio(from._internal_audio());
  }
}

void AudioState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AudioState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioState::CopyFrom(const AudioState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AudioState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioState::IsInitialized() const {
  return true;
}

void AudioState::InternalSwap(AudioState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(audio_, other->audio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPSParameter::InitAsDefaultInstance() {
}
class GPSParameter::_Internal {
 public:
};

GPSParameter::GPSParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GPSParameter)
}
GPSParameter::GPSParameter(const GPSParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&azimuth_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(azimuth_));
  // @@protoc_insertion_point(copy_constructor:GPSParameter)
}

void GPSParameter::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&azimuth_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(azimuth_));
}

GPSParameter::~GPSParameter() {
  // @@protoc_insertion_point(destructor:GPSParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPSParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GPSParameter::ArenaDtor(void* object) {
  GPSParameter* _this = reinterpret_cast< GPSParameter* >(object);
  (void)_this;
}
void GPSParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPSParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSParameter& GPSParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSParameter_Connection_2eproto.base);
  return *internal_default_instance();
}


void GPSParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:GPSParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&azimuth_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(azimuth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPSParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double Lat = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double long = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          long__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double compassOffset = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          compassoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double azimuth = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GPSParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Lat = 27;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_lat(), target);
  }

  // double long = 28;
  if (!(this->long_() <= 0 && this->long_() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_long_(), target);
  }

  // double compassOffset = 29;
  if (!(this->compassoffset() <= 0 && this->compassoffset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_compassoffset(), target);
  }

  // double azimuth = 30;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_azimuth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GPSParameter)
  return target;
}

size_t GPSParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GPSParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Lat = 27;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 2 + 8;
  }

  // double long = 28;
  if (!(this->long_() <= 0 && this->long_() >= 0)) {
    total_size += 2 + 8;
  }

  // double compassOffset = 29;
  if (!(this->compassoffset() <= 0 && this->compassoffset() >= 0)) {
    total_size += 2 + 8;
  }

  // double azimuth = 30;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GPSParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GPSParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GPSParameter)
    MergeFrom(*source);
  }
}

void GPSParameter::MergeFrom(const GPSParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GPSParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.long_() <= 0 && from.long_() >= 0)) {
    _internal_set_long_(from._internal_long_());
  }
  if (!(from.compassoffset() <= 0 && from.compassoffset() >= 0)) {
    _internal_set_compassoffset(from._internal_compassoffset());
  }
  if (!(from.azimuth() <= 0 && from.azimuth() >= 0)) {
    _internal_set_azimuth(from._internal_azimuth());
  }
}

void GPSParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GPSParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSParameter::CopyFrom(const GPSParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GPSParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSParameter::IsInitialized() const {
  return true;
}

void GPSParameter::InternalSwap(GPSParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPSParameter, azimuth_)
      + sizeof(GPSParameter::azimuth_)
      - PROTOBUF_FIELD_OFFSET(GPSParameter, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AntennaState::InitAsDefaultInstance() {
}
class AntennaState::_Internal {
 public:
};

AntennaState::AntennaState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AntennaState)
}
AntennaState::AntennaState(const AntennaState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&add050_, &from.add050_,
    static_cast<size_t>(reinterpret_cast<char*>(&add227_) -
    reinterpret_cast<char*>(&add050_)) + sizeof(add227_));
  // @@protoc_insertion_point(copy_constructor:AntennaState)
}

void AntennaState::SharedCtor() {
  ::memset(&add050_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add227_) -
      reinterpret_cast<char*>(&add050_)) + sizeof(add227_));
}

AntennaState::~AntennaState() {
  // @@protoc_insertion_point(destructor:AntennaState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AntennaState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AntennaState::ArenaDtor(void* object) {
  AntennaState* _this = reinterpret_cast< AntennaState* >(object);
  (void)_this;
}
void AntennaState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AntennaState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AntennaState& AntennaState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AntennaState_Connection_2eproto.base);
  return *internal_default_instance();
}


void AntennaState::Clear() {
// @@protoc_insertion_point(message_clear_start:AntennaState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&add050_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add227_) -
      reinterpret_cast<char*>(&add050_)) + sizeof(add227_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ADD050 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          add050_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ADD150 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          add150_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ADD078 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add078_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ADD070 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          add070_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ADD327 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          add327_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ADD207 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          add207_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ADD107 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          add107_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ADD227 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          add227_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AntennaState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AntennaState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ADD050 = 31;
  if (this->add050() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_add050(), target);
  }

  // bool ADD150 = 32;
  if (this->add150() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_add150(), target);
  }

  // bool ADD078 = 33;
  if (this->add078() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_add078(), target);
  }

  // bool ADD070 = 34;
  if (this->add070() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_add070(), target);
  }

  // bool ADD327 = 35;
  if (this->add327() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_add327(), target);
  }

  // bool ADD207 = 36;
  if (this->add207() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_add207(), target);
  }

  // bool ADD107 = 37;
  if (this->add107() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_add107(), target);
  }

  // bool ADD227 = 38;
  if (this->add227() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_add227(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AntennaState)
  return target;
}

size_t AntennaState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AntennaState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ADD050 = 31;
  if (this->add050() != 0) {
    total_size += 2 + 1;
  }

  // bool ADD150 = 32;
  if (this->add150() != 0) {
    total_size += 2 + 1;
  }

  // bool ADD078 = 33;
  if (this->add078() != 0) {
    total_size += 2 + 1;
  }

  // bool ADD070 = 34;
  if (this->add070() != 0) {
    total_size += 2 + 1;
  }

  // bool ADD327 = 35;
  if (this->add327() != 0) {
    total_size += 2 + 1;
  }

  // bool ADD207 = 36;
  if (this->add207() != 0) {
    total_size += 2 + 1;
  }

  // bool ADD107 = 37;
  if (this->add107() != 0) {
    total_size += 2 + 1;
  }

  // bool ADD227 = 38;
  if (this->add227() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AntennaState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AntennaState)
  GOOGLE_DCHECK_NE(&from, this);
  const AntennaState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AntennaState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AntennaState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AntennaState)
    MergeFrom(*source);
  }
}

void AntennaState::MergeFrom(const AntennaState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AntennaState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.add050() != 0) {
    _internal_set_add050(from._internal_add050());
  }
  if (from.add150() != 0) {
    _internal_set_add150(from._internal_add150());
  }
  if (from.add078() != 0) {
    _internal_set_add078(from._internal_add078());
  }
  if (from.add070() != 0) {
    _internal_set_add070(from._internal_add070());
  }
  if (from.add327() != 0) {
    _internal_set_add327(from._internal_add327());
  }
  if (from.add207() != 0) {
    _internal_set_add207(from._internal_add207());
  }
  if (from.add107() != 0) {
    _internal_set_add107(from._internal_add107());
  }
  if (from.add227() != 0) {
    _internal_set_add227(from._internal_add227());
  }
}

void AntennaState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AntennaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntennaState::CopyFrom(const AntennaState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AntennaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaState::IsInitialized() const {
  return true;
}

void AntennaState::InternalSwap(AntennaState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaState, add227_)
      + sizeof(AntennaState::add227_)
      - PROTOBUF_FIELD_OFFSET(AntennaState, add050_)>(
          reinterpret_cast<char*>(&add050_),
          reinterpret_cast<char*>(&other->add050_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AntennaOFFset::InitAsDefaultInstance() {
}
class AntennaOFFset::_Internal {
 public:
};

AntennaOFFset::AntennaOFFset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AntennaOFFset)
}
AntennaOFFset::AntennaOFFset(const AntennaOFFset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&add050_, &from.add050_,
    static_cast<size_t>(reinterpret_cast<char*>(&add227_) -
    reinterpret_cast<char*>(&add050_)) + sizeof(add227_));
  // @@protoc_insertion_point(copy_constructor:AntennaOFFset)
}

void AntennaOFFset::SharedCtor() {
  ::memset(&add050_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add227_) -
      reinterpret_cast<char*>(&add050_)) + sizeof(add227_));
}

AntennaOFFset::~AntennaOFFset() {
  // @@protoc_insertion_point(destructor:AntennaOFFset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AntennaOFFset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AntennaOFFset::ArenaDtor(void* object) {
  AntennaOFFset* _this = reinterpret_cast< AntennaOFFset* >(object);
  (void)_this;
}
void AntennaOFFset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AntennaOFFset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AntennaOFFset& AntennaOFFset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AntennaOFFset_Connection_2eproto.base);
  return *internal_default_instance();
}


void AntennaOFFset::Clear() {
// @@protoc_insertion_point(message_clear_start:AntennaOFFset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&add050_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add227_) -
      reinterpret_cast<char*>(&add050_)) + sizeof(add227_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntennaOFFset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double ADD050 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          add050_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ADD150 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          add150_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ADD078 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          add078_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ADD070 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          add070_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ADD327 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          add327_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ADD207 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          add207_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ADD107 = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          add107_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ADD227 = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          add227_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AntennaOFFset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AntennaOFFset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ADD050 = 39;
  if (!(this->add050() <= 0 && this->add050() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_add050(), target);
  }

  // double ADD150 = 40;
  if (!(this->add150() <= 0 && this->add150() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_add150(), target);
  }

  // double ADD078 = 41;
  if (!(this->add078() <= 0 && this->add078() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_add078(), target);
  }

  // double ADD070 = 42;
  if (!(this->add070() <= 0 && this->add070() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->_internal_add070(), target);
  }

  // double ADD327 = 43;
  if (!(this->add327() <= 0 && this->add327() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(43, this->_internal_add327(), target);
  }

  // double ADD207 = 44;
  if (!(this->add207() <= 0 && this->add207() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(44, this->_internal_add207(), target);
  }

  // double ADD107 = 45;
  if (!(this->add107() <= 0 && this->add107() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(45, this->_internal_add107(), target);
  }

  // double ADD227 = 46;
  if (!(this->add227() <= 0 && this->add227() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(46, this->_internal_add227(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AntennaOFFset)
  return target;
}

size_t AntennaOFFset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AntennaOFFset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ADD050 = 39;
  if (!(this->add050() <= 0 && this->add050() >= 0)) {
    total_size += 2 + 8;
  }

  // double ADD150 = 40;
  if (!(this->add150() <= 0 && this->add150() >= 0)) {
    total_size += 2 + 8;
  }

  // double ADD078 = 41;
  if (!(this->add078() <= 0 && this->add078() >= 0)) {
    total_size += 2 + 8;
  }

  // double ADD070 = 42;
  if (!(this->add070() <= 0 && this->add070() >= 0)) {
    total_size += 2 + 8;
  }

  // double ADD327 = 43;
  if (!(this->add327() <= 0 && this->add327() >= 0)) {
    total_size += 2 + 8;
  }

  // double ADD207 = 44;
  if (!(this->add207() <= 0 && this->add207() >= 0)) {
    total_size += 2 + 8;
  }

  // double ADD107 = 45;
  if (!(this->add107() <= 0 && this->add107() >= 0)) {
    total_size += 2 + 8;
  }

  // double ADD227 = 46;
  if (!(this->add227() <= 0 && this->add227() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AntennaOFFset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AntennaOFFset)
  GOOGLE_DCHECK_NE(&from, this);
  const AntennaOFFset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AntennaOFFset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AntennaOFFset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AntennaOFFset)
    MergeFrom(*source);
  }
}

void AntennaOFFset::MergeFrom(const AntennaOFFset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AntennaOFFset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.add050() <= 0 && from.add050() >= 0)) {
    _internal_set_add050(from._internal_add050());
  }
  if (!(from.add150() <= 0 && from.add150() >= 0)) {
    _internal_set_add150(from._internal_add150());
  }
  if (!(from.add078() <= 0 && from.add078() >= 0)) {
    _internal_set_add078(from._internal_add078());
  }
  if (!(from.add070() <= 0 && from.add070() >= 0)) {
    _internal_set_add070(from._internal_add070());
  }
  if (!(from.add327() <= 0 && from.add327() >= 0)) {
    _internal_set_add327(from._internal_add327());
  }
  if (!(from.add207() <= 0 && from.add207() >= 0)) {
    _internal_set_add207(from._internal_add207());
  }
  if (!(from.add107() <= 0 && from.add107() >= 0)) {
    _internal_set_add107(from._internal_add107());
  }
  if (!(from.add227() <= 0 && from.add227() >= 0)) {
    _internal_set_add227(from._internal_add227());
  }
}

void AntennaOFFset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AntennaOFFset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntennaOFFset::CopyFrom(const AntennaOFFset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AntennaOFFset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntennaOFFset::IsInitialized() const {
  return true;
}

void AntennaOFFset::InternalSwap(AntennaOFFset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntennaOFFset, add227_)
      + sizeof(AntennaOFFset::add227_)
      - PROTOBUF_FIELD_OFFSET(AntennaOFFset, add050_)>(
          reinterpret_cast<char*>(&add050_),
          reinterpret_cast<char*>(&other->add050_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntennaOFFset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Defaults::InitAsDefaultInstance() {
}
class Defaults::_Internal {
 public:
};

Defaults::Defaults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Defaults)
}
Defaults::Defaults(const Defaults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&systemtype_, &from.systemtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximumfreqrange_) -
    reinterpret_cast<char*>(&systemtype_)) + sizeof(maximumfreqrange_));
  // @@protoc_insertion_point(copy_constructor:Defaults)
}

void Defaults::SharedCtor() {
  ::memset(&systemtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximumfreqrange_) -
      reinterpret_cast<char*>(&systemtype_)) + sizeof(maximumfreqrange_));
}

Defaults::~Defaults() {
  // @@protoc_insertion_point(destructor:Defaults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Defaults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Defaults::ArenaDtor(void* object) {
  Defaults* _this = reinterpret_cast< Defaults* >(object);
  (void)_this;
}
void Defaults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Defaults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Defaults& Defaults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Defaults_Connection_2eproto.base);
  return *internal_default_instance();
}


void Defaults::Clear() {
// @@protoc_insertion_point(message_clear_start:Defaults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&systemtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximumfreqrange_) -
      reinterpret_cast<char*>(&systemtype_)) + sizeof(maximumfreqrange_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Defaults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Defaults.SYSTEMTYPE systemtype = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_systemtype(static_cast<::Defaults_SYSTEMTYPE>(val));
        } else goto handle_unusual;
        continue;
      // .Defaults.BW WideBandBanwith = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_widebandbanwith(static_cast<::Defaults_BW>(val));
        } else goto handle_unusual;
        continue;
      // int32 MinimumFreqRange = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          minimumfreqrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaximumFreqRange = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          maximumfreqrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Defaults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Defaults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Defaults.SYSTEMTYPE systemtype = 47;
  if (this->systemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      47, this->_internal_systemtype(), target);
  }

  // .Defaults.BW WideBandBanwith = 48;
  if (this->widebandbanwith() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      48, this->_internal_widebandbanwith(), target);
  }

  // int32 MinimumFreqRange = 49;
  if (this->minimumfreqrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->_internal_minimumfreqrange(), target);
  }

  // int32 MaximumFreqRange = 50;
  if (this->maximumfreqrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_maximumfreqrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Defaults)
  return target;
}

size_t Defaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Defaults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Defaults.SYSTEMTYPE systemtype = 47;
  if (this->systemtype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_systemtype());
  }

  // .Defaults.BW WideBandBanwith = 48;
  if (this->widebandbanwith() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_widebandbanwith());
  }

  // int32 MinimumFreqRange = 49;
  if (this->minimumfreqrange() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minimumfreqrange());
  }

  // int32 MaximumFreqRange = 50;
  if (this->maximumfreqrange() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximumfreqrange());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Defaults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Defaults)
  GOOGLE_DCHECK_NE(&from, this);
  const Defaults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Defaults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Defaults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Defaults)
    MergeFrom(*source);
  }
}

void Defaults::MergeFrom(const Defaults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Defaults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.systemtype() != 0) {
    _internal_set_systemtype(from._internal_systemtype());
  }
  if (from.widebandbanwith() != 0) {
    _internal_set_widebandbanwith(from._internal_widebandbanwith());
  }
  if (from.minimumfreqrange() != 0) {
    _internal_set_minimumfreqrange(from._internal_minimumfreqrange());
  }
  if (from.maximumfreqrange() != 0) {
    _internal_set_maximumfreqrange(from._internal_maximumfreqrange());
  }
}

void Defaults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Defaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Defaults::CopyFrom(const Defaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Defaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Defaults::IsInitialized() const {
  return true;
}

void Defaults::InternalSwap(Defaults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Defaults, maximumfreqrange_)
      + sizeof(Defaults::maximumfreqrange_)
      - PROTOBUF_FIELD_OFFSET(Defaults, systemtype_)>(
          reinterpret_cast<char*>(&systemtype_),
          reinterpret_cast<char*>(&other->systemtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Defaults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationState::InitAsDefaultInstance() {
}
class ClassificationState::_Internal {
 public:
};

ClassificationState::ClassificationState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClassificationState)
}
ClassificationState::ClassificationState(const ClassificationState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ClassificationState)
}

void ClassificationState::SharedCtor() {
  state_ = false;
}

ClassificationState::~ClassificationState() {
  // @@protoc_insertion_point(destructor:ClassificationState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClassificationState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClassificationState::ArenaDtor(void* object) {
  ClassificationState* _this = reinterpret_cast< ClassificationState* >(object);
  (void)_this;
}
void ClassificationState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassificationState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationState& ClassificationState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationState_Connection_2eproto.base);
  return *internal_default_instance();
}


void ClassificationState::Clear() {
// @@protoc_insertion_point(message_clear_start:ClassificationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassificationState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool state = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClassificationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool state = 51;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClassificationState)
  return target;
}

size_t ClassificationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClassificationState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool state = 51;
  if (this->state() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClassificationState)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClassificationState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClassificationState)
    MergeFrom(*source);
  }
}

void ClassificationState::MergeFrom(const ClassificationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClassificationState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void ClassificationState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClassificationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationState::CopyFrom(const ClassificationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClassificationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationState::IsInitialized() const {
  return true;
}

void ClassificationState::InternalSwap(ClassificationState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationDataRdy::InitAsDefaultInstance() {
}
class ClassificationDataRdy::_Internal {
 public:
};

ClassificationDataRdy::ClassificationDataRdy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClassificationDataRdy)
}
ClassificationDataRdy::ClassificationDataRdy(const ClassificationDataRdy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&signalmode_, &from.signalmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&azimuth_) -
    reinterpret_cast<char*>(&signalmode_)) + sizeof(azimuth_));
  // @@protoc_insertion_point(copy_constructor:ClassificationDataRdy)
}

void ClassificationDataRdy::SharedCtor() {
  ::memset(&signalmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&azimuth_) -
      reinterpret_cast<char*>(&signalmode_)) + sizeof(azimuth_));
}

ClassificationDataRdy::~ClassificationDataRdy() {
  // @@protoc_insertion_point(destructor:ClassificationDataRdy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClassificationDataRdy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClassificationDataRdy::ArenaDtor(void* object) {
  ClassificationDataRdy* _this = reinterpret_cast< ClassificationDataRdy* >(object);
  (void)_this;
}
void ClassificationDataRdy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassificationDataRdy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationDataRdy& ClassificationDataRdy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationDataRdy_Connection_2eproto.base);
  return *internal_default_instance();
}


void ClassificationDataRdy::Clear() {
// @@protoc_insertion_point(message_clear_start:ClassificationDataRdy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&signalmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&azimuth_) -
      reinterpret_cast<char*>(&signalmode_)) + sizeof(azimuth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassificationDataRdy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClassificationDataRdy.SINGALMODE SignalMode = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_signalmode(static_cast<::ClassificationDataRdy_SINGALMODE>(val));
        } else goto handle_unusual;
        continue;
      // int32 startIndex = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          startindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StopIndex = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          stopindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CenterIndex = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          centerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Azimuth = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationDataRdy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClassificationDataRdy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClassificationDataRdy.SINGALMODE SignalMode = 52;
  if (this->signalmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      52, this->_internal_signalmode(), target);
  }

  // int32 startIndex = 53;
  if (this->startindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(53, this->_internal_startindex(), target);
  }

  // int32 StopIndex = 54;
  if (this->stopindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_stopindex(), target);
  }

  // int32 CenterIndex = 55;
  if (this->centerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(55, this->_internal_centerindex(), target);
  }

  // double Azimuth = 56;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(56, this->_internal_azimuth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClassificationDataRdy)
  return target;
}

size_t ClassificationDataRdy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClassificationDataRdy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ClassificationDataRdy.SINGALMODE SignalMode = 52;
  if (this->signalmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_signalmode());
  }

  // int32 startIndex = 53;
  if (this->startindex() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_startindex());
  }

  // int32 StopIndex = 54;
  if (this->stopindex() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stopindex());
  }

  // int32 CenterIndex = 55;
  if (this->centerindex() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_centerindex());
  }

  // double Azimuth = 56;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationDataRdy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClassificationDataRdy)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationDataRdy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationDataRdy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClassificationDataRdy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClassificationDataRdy)
    MergeFrom(*source);
  }
}

void ClassificationDataRdy::MergeFrom(const ClassificationDataRdy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClassificationDataRdy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signalmode() != 0) {
    _internal_set_signalmode(from._internal_signalmode());
  }
  if (from.startindex() != 0) {
    _internal_set_startindex(from._internal_startindex());
  }
  if (from.stopindex() != 0) {
    _internal_set_stopindex(from._internal_stopindex());
  }
  if (from.centerindex() != 0) {
    _internal_set_centerindex(from._internal_centerindex());
  }
  if (!(from.azimuth() <= 0 && from.azimuth() >= 0)) {
    _internal_set_azimuth(from._internal_azimuth());
  }
}

void ClassificationDataRdy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClassificationDataRdy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationDataRdy::CopyFrom(const ClassificationDataRdy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClassificationDataRdy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationDataRdy::IsInitialized() const {
  return true;
}

void ClassificationDataRdy::InternalSwap(ClassificationDataRdy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClassificationDataRdy, azimuth_)
      + sizeof(ClassificationDataRdy::azimuth_)
      - PROTOBUF_FIELD_OFFSET(ClassificationDataRdy, signalmode_)>(
          reinterpret_cast<char*>(&signalmode_),
          reinterpret_cast<char*>(&other->signalmode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationDataRdy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DFstate::InitAsDefaultInstance() {
}
class DFstate::_Internal {
 public:
};

DFstate::DFstate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DFstate)
}
DFstate::DFstate(const DFstate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dfstartstop_ = from.dfstartstop_;
  // @@protoc_insertion_point(copy_constructor:DFstate)
}

void DFstate::SharedCtor() {
  dfstartstop_ = false;
}

DFstate::~DFstate() {
  // @@protoc_insertion_point(destructor:DFstate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DFstate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DFstate::ArenaDtor(void* object) {
  DFstate* _this = reinterpret_cast< DFstate* >(object);
  (void)_this;
}
void DFstate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DFstate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DFstate& DFstate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DFstate_Connection_2eproto.base);
  return *internal_default_instance();
}


void DFstate::Clear() {
// @@protoc_insertion_point(message_clear_start:DFstate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dfstartstop_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DFstate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool DFStartStop = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          dfstartstop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DFstate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DFstate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool DFStartStop = 57;
  if (this->dfstartstop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_dfstartstop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DFstate)
  return target;
}

size_t DFstate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DFstate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool DFStartStop = 57;
  if (this->dfstartstop() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DFstate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DFstate)
  GOOGLE_DCHECK_NE(&from, this);
  const DFstate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DFstate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DFstate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DFstate)
    MergeFrom(*source);
  }
}

void DFstate::MergeFrom(const DFstate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DFstate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dfstartstop() != 0) {
    _internal_set_dfstartstop(from._internal_dfstartstop());
  }
}

void DFstate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DFstate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DFstate::CopyFrom(const DFstate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DFstate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFstate::IsInitialized() const {
  return true;
}

void DFstate::InternalSwap(DFstate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(dfstartstop_, other->dfstartstop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DFstate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferData::InitAsDefaultInstance() {
}
class TransferData::_Internal {
 public:
};

TransferData::TransferData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TransferData)
}
TransferData::TransferData(const TransferData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&transferdfparameters_, &from.transferdfparameters_,
    static_cast<size_t>(reinterpret_cast<char*>(&transfersystemparameters_) -
    reinterpret_cast<char*>(&transferdfparameters_)) + sizeof(transfersystemparameters_));
  // @@protoc_insertion_point(copy_constructor:TransferData)
}

void TransferData::SharedCtor() {
  ::memset(&transferdfparameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfersystemparameters_) -
      reinterpret_cast<char*>(&transferdfparameters_)) + sizeof(transfersystemparameters_));
}

TransferData::~TransferData() {
  // @@protoc_insertion_point(destructor:TransferData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransferData::ArenaDtor(void* object) {
  TransferData* _this = reinterpret_cast< TransferData* >(object);
  (void)_this;
}
void TransferData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferData& TransferData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferData_Connection_2eproto.base);
  return *internal_default_instance();
}


void TransferData::Clear() {
// @@protoc_insertion_point(message_clear_start:TransferData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&transferdfparameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfersystemparameters_) -
      reinterpret_cast<char*>(&transferdfparameters_)) + sizeof(transfersystemparameters_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TransferData.TRANSDATA TransferDataRange = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_transferdatarange(static_cast<::TransferData_TRANSDATA>(val));
        } else goto handle_unusual;
        continue;
      // bool TransferAudio = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          transferaudio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool TransferPSD = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          transferpsd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool TransferDOA = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          transferdoa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool TransferSystemParameters = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          transfersystemparameters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool TransferDFParameters = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          transferdfparameters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransferData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TransferData.TRANSDATA TransferDataRange = 58;
  if (this->transferdatarange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      58, this->_internal_transferdatarange(), target);
  }

  // bool TransferAudio = 59;
  if (this->transferaudio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_transferaudio(), target);
  }

  // bool TransferPSD = 60;
  if (this->transferpsd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_transferpsd(), target);
  }

  // bool TransferDOA = 61;
  if (this->transferdoa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_transferdoa(), target);
  }

  // bool TransferSystemParameters = 62;
  if (this->transfersystemparameters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(62, this->_internal_transfersystemparameters(), target);
  }

  // bool TransferDFParameters = 63;
  if (this->transferdfparameters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(63, this->_internal_transferdfparameters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransferData)
  return target;
}

size_t TransferData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransferData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool TransferDFParameters = 63;
  if (this->transferdfparameters() != 0) {
    total_size += 2 + 1;
  }

  // .TransferData.TRANSDATA TransferDataRange = 58;
  if (this->transferdatarange() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_transferdatarange());
  }

  // bool TransferAudio = 59;
  if (this->transferaudio() != 0) {
    total_size += 2 + 1;
  }

  // bool TransferPSD = 60;
  if (this->transferpsd() != 0) {
    total_size += 2 + 1;
  }

  // bool TransferDOA = 61;
  if (this->transferdoa() != 0) {
    total_size += 2 + 1;
  }

  // bool TransferSystemParameters = 62;
  if (this->transfersystemparameters() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransferData)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransferData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransferData)
    MergeFrom(*source);
  }
}

void TransferData::MergeFrom(const TransferData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransferData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transferdfparameters() != 0) {
    _internal_set_transferdfparameters(from._internal_transferdfparameters());
  }
  if (from.transferdatarange() != 0) {
    _internal_set_transferdatarange(from._internal_transferdatarange());
  }
  if (from.transferaudio() != 0) {
    _internal_set_transferaudio(from._internal_transferaudio());
  }
  if (from.transferpsd() != 0) {
    _internal_set_transferpsd(from._internal_transferpsd());
  }
  if (from.transferdoa() != 0) {
    _internal_set_transferdoa(from._internal_transferdoa());
  }
  if (from.transfersystemparameters() != 0) {
    _internal_set_transfersystemparameters(from._internal_transfersystemparameters());
  }
}

void TransferData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransferData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferData::CopyFrom(const TransferData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransferData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferData::IsInitialized() const {
  return true;
}

void TransferData::InternalSwap(TransferData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferData, transfersystemparameters_)
      + sizeof(TransferData::transfersystemparameters_)
      - PROTOBUF_FIELD_OFFSET(TransferData, transferdfparameters_)>(
          reinterpret_cast<char*>(&transferdfparameters_),
          reinterpret_cast<char*>(&other->transferdfparameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DFarameters* Arena::CreateMaybeMessage< ::DFarameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DFarameters >(arena);
}
template<> PROTOBUF_NOINLINE ::SystemParameters* Arena::CreateMaybeMessage< ::SystemParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SystemParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::Frequency* Arena::CreateMaybeMessage< ::Frequency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Frequency >(arena);
}
template<> PROTOBUF_NOINLINE ::Threshold* Arena::CreateMaybeMessage< ::Threshold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Threshold >(arena);
}
template<> PROTOBUF_NOINLINE ::PSDDataRdyDOUBLE* Arena::CreateMaybeMessage< ::PSDDataRdyDOUBLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PSDDataRdyDOUBLE >(arena);
}
template<> PROTOBUF_NOINLINE ::PSDDataRdyINT* Arena::CreateMaybeMessage< ::PSDDataRdyINT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PSDDataRdyINT >(arena);
}
template<> PROTOBUF_NOINLINE ::DOADataRdydouble* Arena::CreateMaybeMessage< ::DOADataRdydouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DOADataRdydouble >(arena);
}
template<> PROTOBUF_NOINLINE ::DOADataRdyshort* Arena::CreateMaybeMessage< ::DOADataRdyshort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DOADataRdyshort >(arena);
}
template<> PROTOBUF_NOINLINE ::AudioDataRdy* Arena::CreateMaybeMessage< ::AudioDataRdy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AudioDataRdy >(arena);
}
template<> PROTOBUF_NOINLINE ::AudioState* Arena::CreateMaybeMessage< ::AudioState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AudioState >(arena);
}
template<> PROTOBUF_NOINLINE ::GPSParameter* Arena::CreateMaybeMessage< ::GPSParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GPSParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::AntennaState* Arena::CreateMaybeMessage< ::AntennaState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AntennaState >(arena);
}
template<> PROTOBUF_NOINLINE ::AntennaOFFset* Arena::CreateMaybeMessage< ::AntennaOFFset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AntennaOFFset >(arena);
}
template<> PROTOBUF_NOINLINE ::Defaults* Arena::CreateMaybeMessage< ::Defaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Defaults >(arena);
}
template<> PROTOBUF_NOINLINE ::ClassificationState* Arena::CreateMaybeMessage< ::ClassificationState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClassificationState >(arena);
}
template<> PROTOBUF_NOINLINE ::ClassificationDataRdy* Arena::CreateMaybeMessage< ::ClassificationDataRdy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClassificationDataRdy >(arena);
}
template<> PROTOBUF_NOINLINE ::DFstate* Arena::CreateMaybeMessage< ::DFstate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DFstate >(arena);
}
template<> PROTOBUF_NOINLINE ::TransferData* Arena::CreateMaybeMessage< ::TransferData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransferData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
