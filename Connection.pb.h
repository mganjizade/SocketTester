// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Connection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Connection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Connection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Connection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Connection_2eproto;
class AntennaOFFset;
class AntennaOFFsetDefaultTypeInternal;
extern AntennaOFFsetDefaultTypeInternal _AntennaOFFset_default_instance_;
class AntennaState;
class AntennaStateDefaultTypeInternal;
extern AntennaStateDefaultTypeInternal _AntennaState_default_instance_;
class AudioDataRdy;
class AudioDataRdyDefaultTypeInternal;
extern AudioDataRdyDefaultTypeInternal _AudioDataRdy_default_instance_;
class AudioState;
class AudioStateDefaultTypeInternal;
extern AudioStateDefaultTypeInternal _AudioState_default_instance_;
class ClassificationDataRdy;
class ClassificationDataRdyDefaultTypeInternal;
extern ClassificationDataRdyDefaultTypeInternal _ClassificationDataRdy_default_instance_;
class ClassificationState;
class ClassificationStateDefaultTypeInternal;
extern ClassificationStateDefaultTypeInternal _ClassificationState_default_instance_;
class DFarameters;
class DFarametersDefaultTypeInternal;
extern DFarametersDefaultTypeInternal _DFarameters_default_instance_;
class DFstate;
class DFstateDefaultTypeInternal;
extern DFstateDefaultTypeInternal _DFstate_default_instance_;
class DOADataRdydouble;
class DOADataRdydoubleDefaultTypeInternal;
extern DOADataRdydoubleDefaultTypeInternal _DOADataRdydouble_default_instance_;
class DOADataRdyshort;
class DOADataRdyshortDefaultTypeInternal;
extern DOADataRdyshortDefaultTypeInternal _DOADataRdyshort_default_instance_;
class Defaults;
class DefaultsDefaultTypeInternal;
extern DefaultsDefaultTypeInternal _Defaults_default_instance_;
class Frequency;
class FrequencyDefaultTypeInternal;
extern FrequencyDefaultTypeInternal _Frequency_default_instance_;
class GPSParameter;
class GPSParameterDefaultTypeInternal;
extern GPSParameterDefaultTypeInternal _GPSParameter_default_instance_;
class PSDDataRdyDOUBLE;
class PSDDataRdyDOUBLEDefaultTypeInternal;
extern PSDDataRdyDOUBLEDefaultTypeInternal _PSDDataRdyDOUBLE_default_instance_;
class PSDDataRdyINT;
class PSDDataRdyINTDefaultTypeInternal;
extern PSDDataRdyINTDefaultTypeInternal _PSDDataRdyINT_default_instance_;
class SystemParameters;
class SystemParametersDefaultTypeInternal;
extern SystemParametersDefaultTypeInternal _SystemParameters_default_instance_;
class Threshold;
class ThresholdDefaultTypeInternal;
extern ThresholdDefaultTypeInternal _Threshold_default_instance_;
class TransferData;
class TransferDataDefaultTypeInternal;
extern TransferDataDefaultTypeInternal _TransferData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AntennaOFFset* Arena::CreateMaybeMessage<::AntennaOFFset>(Arena*);
template<> ::AntennaState* Arena::CreateMaybeMessage<::AntennaState>(Arena*);
template<> ::AudioDataRdy* Arena::CreateMaybeMessage<::AudioDataRdy>(Arena*);
template<> ::AudioState* Arena::CreateMaybeMessage<::AudioState>(Arena*);
template<> ::ClassificationDataRdy* Arena::CreateMaybeMessage<::ClassificationDataRdy>(Arena*);
template<> ::ClassificationState* Arena::CreateMaybeMessage<::ClassificationState>(Arena*);
template<> ::DFarameters* Arena::CreateMaybeMessage<::DFarameters>(Arena*);
template<> ::DFstate* Arena::CreateMaybeMessage<::DFstate>(Arena*);
template<> ::DOADataRdydouble* Arena::CreateMaybeMessage<::DOADataRdydouble>(Arena*);
template<> ::DOADataRdyshort* Arena::CreateMaybeMessage<::DOADataRdyshort>(Arena*);
template<> ::Defaults* Arena::CreateMaybeMessage<::Defaults>(Arena*);
template<> ::Frequency* Arena::CreateMaybeMessage<::Frequency>(Arena*);
template<> ::GPSParameter* Arena::CreateMaybeMessage<::GPSParameter>(Arena*);
template<> ::PSDDataRdyDOUBLE* Arena::CreateMaybeMessage<::PSDDataRdyDOUBLE>(Arena*);
template<> ::PSDDataRdyINT* Arena::CreateMaybeMessage<::PSDDataRdyINT>(Arena*);
template<> ::SystemParameters* Arena::CreateMaybeMessage<::SystemParameters>(Arena*);
template<> ::Threshold* Arena::CreateMaybeMessage<::Threshold>(Arena*);
template<> ::TransferData* Arena::CreateMaybeMessage<::TransferData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SystemParameters_AGC : int {
  SystemParameters_AGC_FAST = 0,
  SystemParameters_AGC_RATED = 1,
  SystemParameters_AGC_SystemParameters_AGC_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SystemParameters_AGC_SystemParameters_AGC_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SystemParameters_AGC_IsValid(int value);
constexpr SystemParameters_AGC SystemParameters_AGC_AGC_MIN = SystemParameters_AGC_FAST;
constexpr SystemParameters_AGC SystemParameters_AGC_AGC_MAX = SystemParameters_AGC_RATED;
constexpr int SystemParameters_AGC_AGC_ARRAYSIZE = SystemParameters_AGC_AGC_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_AGC_descriptor();
template<typename T>
inline const std::string& SystemParameters_AGC_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemParameters_AGC>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemParameters_AGC_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemParameters_AGC_descriptor(), enum_t_value);
}
inline bool SystemParameters_AGC_Parse(
    const std::string& name, SystemParameters_AGC* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemParameters_AGC>(
    SystemParameters_AGC_descriptor(), name, value);
}
enum SystemParameters_RFHEAD : int {
  SystemParameters_RFHEAD_ATT = 0,
  SystemParameters_RFHEAD_HL = 1,
  SystemParameters_RFHEAD_HS = 2,
  SystemParameters_RFHEAD_SystemParameters_RFHEAD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SystemParameters_RFHEAD_SystemParameters_RFHEAD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SystemParameters_RFHEAD_IsValid(int value);
constexpr SystemParameters_RFHEAD SystemParameters_RFHEAD_RFHEAD_MIN = SystemParameters_RFHEAD_ATT;
constexpr SystemParameters_RFHEAD SystemParameters_RFHEAD_RFHEAD_MAX = SystemParameters_RFHEAD_HS;
constexpr int SystemParameters_RFHEAD_RFHEAD_ARRAYSIZE = SystemParameters_RFHEAD_RFHEAD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_RFHEAD_descriptor();
template<typename T>
inline const std::string& SystemParameters_RFHEAD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemParameters_RFHEAD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemParameters_RFHEAD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemParameters_RFHEAD_descriptor(), enum_t_value);
}
inline bool SystemParameters_RFHEAD_Parse(
    const std::string& name, SystemParameters_RFHEAD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemParameters_RFHEAD>(
    SystemParameters_RFHEAD_descriptor(), name, value);
}
enum SystemParameters_DEMOD : int {
  SystemParameters_DEMOD_AM = 0,
  SystemParameters_DEMOD_FM = 1,
  SystemParameters_DEMOD_PM = 2,
  SystemParameters_DEMOD_SystemParameters_DEMOD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SystemParameters_DEMOD_SystemParameters_DEMOD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SystemParameters_DEMOD_IsValid(int value);
constexpr SystemParameters_DEMOD SystemParameters_DEMOD_DEMOD_MIN = SystemParameters_DEMOD_AM;
constexpr SystemParameters_DEMOD SystemParameters_DEMOD_DEMOD_MAX = SystemParameters_DEMOD_PM;
constexpr int SystemParameters_DEMOD_DEMOD_ARRAYSIZE = SystemParameters_DEMOD_DEMOD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_DEMOD_descriptor();
template<typename T>
inline const std::string& SystemParameters_DEMOD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemParameters_DEMOD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemParameters_DEMOD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemParameters_DEMOD_descriptor(), enum_t_value);
}
inline bool SystemParameters_DEMOD_Parse(
    const std::string& name, SystemParameters_DEMOD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemParameters_DEMOD>(
    SystemParameters_DEMOD_descriptor(), name, value);
}
enum SystemParameters_FFTPOINT : int {
  SystemParameters_FFTPOINT__512 = 0,
  SystemParameters_FFTPOINT__1024 = 1,
  SystemParameters_FFTPOINT__2048 = 2,
  SystemParameters_FFTPOINT_SystemParameters_FFTPOINT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SystemParameters_FFTPOINT_SystemParameters_FFTPOINT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SystemParameters_FFTPOINT_IsValid(int value);
constexpr SystemParameters_FFTPOINT SystemParameters_FFTPOINT_FFTPOINT_MIN = SystemParameters_FFTPOINT__512;
constexpr SystemParameters_FFTPOINT SystemParameters_FFTPOINT_FFTPOINT_MAX = SystemParameters_FFTPOINT__2048;
constexpr int SystemParameters_FFTPOINT_FFTPOINT_ARRAYSIZE = SystemParameters_FFTPOINT_FFTPOINT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_FFTPOINT_descriptor();
template<typename T>
inline const std::string& SystemParameters_FFTPOINT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemParameters_FFTPOINT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemParameters_FFTPOINT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemParameters_FFTPOINT_descriptor(), enum_t_value);
}
inline bool SystemParameters_FFTPOINT_Parse(
    const std::string& name, SystemParameters_FFTPOINT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemParameters_FFTPOINT>(
    SystemParameters_FFTPOINT_descriptor(), name, value);
}
enum SystemParameters_BANDWIDTH : int {
  SystemParameters_BANDWIDTH_DFBW_1_KHz = 0,
  SystemParameters_BANDWIDTH_DFBW_15_KHz = 1,
  SystemParameters_BANDWIDTH_DFBW_25_KHz = 2,
  SystemParameters_BANDWIDTH_DFBW_50_KHz = 3,
  SystemParameters_BANDWIDTH_DFBW_100_KHz = 4,
  SystemParameters_BANDWIDTH_DFBW_150_KHz = 5,
  SystemParameters_BANDWIDTH_DFBW_250_KHz = 6,
  SystemParameters_BANDWIDTH_DFBW_500_KHz = 7,
  SystemParameters_BANDWIDTH_DFBW_1_MHz = 8,
  SystemParameters_BANDWIDTH_DFBW_1M5_MHz = 9,
  SystemParameters_BANDWIDTH_DFBW_2_MHz = 10,
  SystemParameters_BANDWIDTH_DFBW_4_MHz = 11,
  SystemParameters_BANDWIDTH_DFBW_33_MHz = 12,
  SystemParameters_BANDWIDTH_DFBW_10_MHz = 13,
  SystemParameters_BANDWIDTH_DFBW_20_MHz = 14,
  SystemParameters_BANDWIDTH_DFBW_200_KHz = 15,
  SystemParameters_BANDWIDTH_DFBW_WB = 16,
  SystemParameters_BANDWIDTH_DFBW_40_MHz = 40,
  SystemParameters_BANDWIDTH_DFBW_80_MHz = 80,
  SystemParameters_BANDWIDTH_SystemParameters_BANDWIDTH_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SystemParameters_BANDWIDTH_SystemParameters_BANDWIDTH_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SystemParameters_BANDWIDTH_IsValid(int value);
constexpr SystemParameters_BANDWIDTH SystemParameters_BANDWIDTH_BANDWIDTH_MIN = SystemParameters_BANDWIDTH_DFBW_1_KHz;
constexpr SystemParameters_BANDWIDTH SystemParameters_BANDWIDTH_BANDWIDTH_MAX = SystemParameters_BANDWIDTH_DFBW_80_MHz;
constexpr int SystemParameters_BANDWIDTH_BANDWIDTH_ARRAYSIZE = SystemParameters_BANDWIDTH_BANDWIDTH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_BANDWIDTH_descriptor();
template<typename T>
inline const std::string& SystemParameters_BANDWIDTH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemParameters_BANDWIDTH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemParameters_BANDWIDTH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemParameters_BANDWIDTH_descriptor(), enum_t_value);
}
inline bool SystemParameters_BANDWIDTH_Parse(
    const std::string& name, SystemParameters_BANDWIDTH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemParameters_BANDWIDTH>(
    SystemParameters_BANDWIDTH_descriptor(), name, value);
}
enum SystemParameters_FILTERS : int {
  SystemParameters_FILTERS_WideBand = 0,
  SystemParameters_FILTERS__100Hz = 1,
  SystemParameters_FILTERS__300Hz = 2,
  SystemParameters_FILTERS__600Hz = 3,
  SystemParameters_FILTERS__1KHz = 4,
  SystemParameters_FILTERS__1AND5KHz = 5,
  SystemParameters_FILTERS__2KHz = 6,
  SystemParameters_FILTERS__3KHz = 7,
  SystemParameters_FILTERS__7_5KHz = 8,
  SystemParameters_FILTERS__15KHz = 9,
  SystemParameters_FILTERS__30KHz = 10,
  SystemParameters_FILTERS__50KHz = 11,
  SystemParameters_FILTERS__120KHz = 12,
  SystemParameters_FILTERS__150KHz = 13,
  SystemParameters_FILTERS_Filter_Count = 14,
  SystemParameters_FILTERS_SystemParameters_FILTERS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SystemParameters_FILTERS_SystemParameters_FILTERS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SystemParameters_FILTERS_IsValid(int value);
constexpr SystemParameters_FILTERS SystemParameters_FILTERS_FILTERS_MIN = SystemParameters_FILTERS_WideBand;
constexpr SystemParameters_FILTERS SystemParameters_FILTERS_FILTERS_MAX = SystemParameters_FILTERS_Filter_Count;
constexpr int SystemParameters_FILTERS_FILTERS_ARRAYSIZE = SystemParameters_FILTERS_FILTERS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemParameters_FILTERS_descriptor();
template<typename T>
inline const std::string& SystemParameters_FILTERS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemParameters_FILTERS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemParameters_FILTERS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemParameters_FILTERS_descriptor(), enum_t_value);
}
inline bool SystemParameters_FILTERS_Parse(
    const std::string& name, SystemParameters_FILTERS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemParameters_FILTERS>(
    SystemParameters_FILTERS_descriptor(), name, value);
}
enum Defaults_SYSTEMTYPE : int {
  Defaults_SYSTEMTYPE_mobin = 0,
  Defaults_SYSTEMTYPE_miadI = 1,
  Defaults_SYSTEMTYPE_miadII = 2,
  Defaults_SYSTEMTYPE_Defaults_SYSTEMTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Defaults_SYSTEMTYPE_Defaults_SYSTEMTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Defaults_SYSTEMTYPE_IsValid(int value);
constexpr Defaults_SYSTEMTYPE Defaults_SYSTEMTYPE_SYSTEMTYPE_MIN = Defaults_SYSTEMTYPE_mobin;
constexpr Defaults_SYSTEMTYPE Defaults_SYSTEMTYPE_SYSTEMTYPE_MAX = Defaults_SYSTEMTYPE_miadII;
constexpr int Defaults_SYSTEMTYPE_SYSTEMTYPE_ARRAYSIZE = Defaults_SYSTEMTYPE_SYSTEMTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Defaults_SYSTEMTYPE_descriptor();
template<typename T>
inline const std::string& Defaults_SYSTEMTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Defaults_SYSTEMTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Defaults_SYSTEMTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Defaults_SYSTEMTYPE_descriptor(), enum_t_value);
}
inline bool Defaults_SYSTEMTYPE_Parse(
    const std::string& name, Defaults_SYSTEMTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Defaults_SYSTEMTYPE>(
    Defaults_SYSTEMTYPE_descriptor(), name, value);
}
enum Defaults_BW : int {
  Defaults_BW__20MHz = 0,
  Defaults_BW__40MHz = 1,
  Defaults_BW_Defaults_BW_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Defaults_BW_Defaults_BW_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Defaults_BW_IsValid(int value);
constexpr Defaults_BW Defaults_BW_BW_MIN = Defaults_BW__20MHz;
constexpr Defaults_BW Defaults_BW_BW_MAX = Defaults_BW__40MHz;
constexpr int Defaults_BW_BW_ARRAYSIZE = Defaults_BW_BW_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Defaults_BW_descriptor();
template<typename T>
inline const std::string& Defaults_BW_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Defaults_BW>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Defaults_BW_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Defaults_BW_descriptor(), enum_t_value);
}
inline bool Defaults_BW_Parse(
    const std::string& name, Defaults_BW* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Defaults_BW>(
    Defaults_BW_descriptor(), name, value);
}
enum ClassificationDataRdy_SINGALMODE : int {
  ClassificationDataRdy_SINGALMODE_Fix = 0,
  ClassificationDataRdy_SINGALMODE_DS = 1,
  ClassificationDataRdy_SINGALMODE_Hopping = 2,
  ClassificationDataRdy_SINGALMODE_ClassificationDataRdy_SINGALMODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClassificationDataRdy_SINGALMODE_ClassificationDataRdy_SINGALMODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClassificationDataRdy_SINGALMODE_IsValid(int value);
constexpr ClassificationDataRdy_SINGALMODE ClassificationDataRdy_SINGALMODE_SINGALMODE_MIN = ClassificationDataRdy_SINGALMODE_Fix;
constexpr ClassificationDataRdy_SINGALMODE ClassificationDataRdy_SINGALMODE_SINGALMODE_MAX = ClassificationDataRdy_SINGALMODE_Hopping;
constexpr int ClassificationDataRdy_SINGALMODE_SINGALMODE_ARRAYSIZE = ClassificationDataRdy_SINGALMODE_SINGALMODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClassificationDataRdy_SINGALMODE_descriptor();
template<typename T>
inline const std::string& ClassificationDataRdy_SINGALMODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClassificationDataRdy_SINGALMODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClassificationDataRdy_SINGALMODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClassificationDataRdy_SINGALMODE_descriptor(), enum_t_value);
}
inline bool ClassificationDataRdy_SINGALMODE_Parse(
    const std::string& name, ClassificationDataRdy_SINGALMODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClassificationDataRdy_SINGALMODE>(
    ClassificationDataRdy_SINGALMODE_descriptor(), name, value);
}
enum TransferData_TRANSDATA : int {
  TransferData_TRANSDATA__10Percent = 0,
  TransferData_TRANSDATA__20Percent = 2,
  TransferData_TRANSDATA__50Percent = 3,
  TransferData_TRANSDATA__75Percent = 4,
  TransferData_TRANSDATA__100Percent = 5,
  TransferData_TRANSDATA_TransferData_TRANSDATA_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransferData_TRANSDATA_TransferData_TRANSDATA_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransferData_TRANSDATA_IsValid(int value);
constexpr TransferData_TRANSDATA TransferData_TRANSDATA_TRANSDATA_MIN = TransferData_TRANSDATA__10Percent;
constexpr TransferData_TRANSDATA TransferData_TRANSDATA_TRANSDATA_MAX = TransferData_TRANSDATA__100Percent;
constexpr int TransferData_TRANSDATA_TRANSDATA_ARRAYSIZE = TransferData_TRANSDATA_TRANSDATA_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferData_TRANSDATA_descriptor();
template<typename T>
inline const std::string& TransferData_TRANSDATA_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransferData_TRANSDATA>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransferData_TRANSDATA_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransferData_TRANSDATA_descriptor(), enum_t_value);
}
inline bool TransferData_TRANSDATA_Parse(
    const std::string& name, TransferData_TRANSDATA* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransferData_TRANSDATA>(
    TransferData_TRANSDATA_descriptor(), name, value);
}
// ===================================================================

class DFarameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DFarameters) */ {
 public:
  inline DFarameters() : DFarameters(nullptr) {};
  virtual ~DFarameters();

  DFarameters(const DFarameters& from);
  DFarameters(DFarameters&& from) noexcept
    : DFarameters() {
    *this = ::std::move(from);
  }

  inline DFarameters& operator=(const DFarameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline DFarameters& operator=(DFarameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DFarameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DFarameters* internal_default_instance() {
    return reinterpret_cast<const DFarameters*>(
               &_DFarameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DFarameters& a, DFarameters& b) {
    a.Swap(&b);
  }
  inline void Swap(DFarameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DFarameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DFarameters* New() const final {
    return CreateMaybeMessage<DFarameters>(nullptr);
  }

  DFarameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DFarameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DFarameters& from);
  void MergeFrom(const DFarameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DFarameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DFarameters";
  }
  protected:
  explicit DFarameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAzimuthFieldNumber = 1,
    kQualityFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // double Azimuth = 1;
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);
  private:
  double _internal_azimuth() const;
  void _internal_set_azimuth(double value);
  public:

  // double Quality = 2;
  void clear_quality();
  double quality() const;
  void set_quality(double value);
  private:
  double _internal_quality() const;
  void _internal_set_quality(double value);
  public:

  // double level = 3;
  void clear_level();
  double level() const;
  void set_level(double value);
  private:
  double _internal_level() const;
  void _internal_set_level(double value);
  public:

  // @@protoc_insertion_point(class_scope:DFarameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double azimuth_;
  double quality_;
  double level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class SystemParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SystemParameters) */ {
 public:
  inline SystemParameters() : SystemParameters(nullptr) {};
  virtual ~SystemParameters();

  SystemParameters(const SystemParameters& from);
  SystemParameters(SystemParameters&& from) noexcept
    : SystemParameters() {
    *this = ::std::move(from);
  }

  inline SystemParameters& operator=(const SystemParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemParameters& operator=(SystemParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemParameters* internal_default_instance() {
    return reinterpret_cast<const SystemParameters*>(
               &_SystemParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemParameters& a, SystemParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemParameters* New() const final {
    return CreateMaybeMessage<SystemParameters>(nullptr);
  }

  SystemParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemParameters& from);
  void MergeFrom(const SystemParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SystemParameters";
  }
  protected:
  explicit SystemParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SystemParameters_AGC AGC;
  static constexpr AGC FAST =
    SystemParameters_AGC_FAST;
  static constexpr AGC RATED =
    SystemParameters_AGC_RATED;
  static inline bool AGC_IsValid(int value) {
    return SystemParameters_AGC_IsValid(value);
  }
  static constexpr AGC AGC_MIN =
    SystemParameters_AGC_AGC_MIN;
  static constexpr AGC AGC_MAX =
    SystemParameters_AGC_AGC_MAX;
  static constexpr int AGC_ARRAYSIZE =
    SystemParameters_AGC_AGC_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AGC_descriptor() {
    return SystemParameters_AGC_descriptor();
  }
  template<typename T>
  static inline const std::string& AGC_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AGC>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AGC_Name.");
    return SystemParameters_AGC_Name(enum_t_value);
  }
  static inline bool AGC_Parse(const std::string& name,
      AGC* value) {
    return SystemParameters_AGC_Parse(name, value);
  }

  typedef SystemParameters_RFHEAD RFHEAD;
  static constexpr RFHEAD ATT =
    SystemParameters_RFHEAD_ATT;
  static constexpr RFHEAD HL =
    SystemParameters_RFHEAD_HL;
  static constexpr RFHEAD HS =
    SystemParameters_RFHEAD_HS;
  static inline bool RFHEAD_IsValid(int value) {
    return SystemParameters_RFHEAD_IsValid(value);
  }
  static constexpr RFHEAD RFHEAD_MIN =
    SystemParameters_RFHEAD_RFHEAD_MIN;
  static constexpr RFHEAD RFHEAD_MAX =
    SystemParameters_RFHEAD_RFHEAD_MAX;
  static constexpr int RFHEAD_ARRAYSIZE =
    SystemParameters_RFHEAD_RFHEAD_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RFHEAD_descriptor() {
    return SystemParameters_RFHEAD_descriptor();
  }
  template<typename T>
  static inline const std::string& RFHEAD_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RFHEAD>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RFHEAD_Name.");
    return SystemParameters_RFHEAD_Name(enum_t_value);
  }
  static inline bool RFHEAD_Parse(const std::string& name,
      RFHEAD* value) {
    return SystemParameters_RFHEAD_Parse(name, value);
  }

  typedef SystemParameters_DEMOD DEMOD;
  static constexpr DEMOD AM =
    SystemParameters_DEMOD_AM;
  static constexpr DEMOD FM =
    SystemParameters_DEMOD_FM;
  static constexpr DEMOD PM =
    SystemParameters_DEMOD_PM;
  static inline bool DEMOD_IsValid(int value) {
    return SystemParameters_DEMOD_IsValid(value);
  }
  static constexpr DEMOD DEMOD_MIN =
    SystemParameters_DEMOD_DEMOD_MIN;
  static constexpr DEMOD DEMOD_MAX =
    SystemParameters_DEMOD_DEMOD_MAX;
  static constexpr int DEMOD_ARRAYSIZE =
    SystemParameters_DEMOD_DEMOD_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DEMOD_descriptor() {
    return SystemParameters_DEMOD_descriptor();
  }
  template<typename T>
  static inline const std::string& DEMOD_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DEMOD>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DEMOD_Name.");
    return SystemParameters_DEMOD_Name(enum_t_value);
  }
  static inline bool DEMOD_Parse(const std::string& name,
      DEMOD* value) {
    return SystemParameters_DEMOD_Parse(name, value);
  }

  typedef SystemParameters_FFTPOINT FFTPOINT;
  static constexpr FFTPOINT _512 =
    SystemParameters_FFTPOINT__512;
  static constexpr FFTPOINT _1024 =
    SystemParameters_FFTPOINT__1024;
  static constexpr FFTPOINT _2048 =
    SystemParameters_FFTPOINT__2048;
  static inline bool FFTPOINT_IsValid(int value) {
    return SystemParameters_FFTPOINT_IsValid(value);
  }
  static constexpr FFTPOINT FFTPOINT_MIN =
    SystemParameters_FFTPOINT_FFTPOINT_MIN;
  static constexpr FFTPOINT FFTPOINT_MAX =
    SystemParameters_FFTPOINT_FFTPOINT_MAX;
  static constexpr int FFTPOINT_ARRAYSIZE =
    SystemParameters_FFTPOINT_FFTPOINT_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FFTPOINT_descriptor() {
    return SystemParameters_FFTPOINT_descriptor();
  }
  template<typename T>
  static inline const std::string& FFTPOINT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FFTPOINT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FFTPOINT_Name.");
    return SystemParameters_FFTPOINT_Name(enum_t_value);
  }
  static inline bool FFTPOINT_Parse(const std::string& name,
      FFTPOINT* value) {
    return SystemParameters_FFTPOINT_Parse(name, value);
  }

  typedef SystemParameters_BANDWIDTH BANDWIDTH;
  static constexpr BANDWIDTH DFBW_1_KHz =
    SystemParameters_BANDWIDTH_DFBW_1_KHz;
  static constexpr BANDWIDTH DFBW_15_KHz =
    SystemParameters_BANDWIDTH_DFBW_15_KHz;
  static constexpr BANDWIDTH DFBW_25_KHz =
    SystemParameters_BANDWIDTH_DFBW_25_KHz;
  static constexpr BANDWIDTH DFBW_50_KHz =
    SystemParameters_BANDWIDTH_DFBW_50_KHz;
  static constexpr BANDWIDTH DFBW_100_KHz =
    SystemParameters_BANDWIDTH_DFBW_100_KHz;
  static constexpr BANDWIDTH DFBW_150_KHz =
    SystemParameters_BANDWIDTH_DFBW_150_KHz;
  static constexpr BANDWIDTH DFBW_250_KHz =
    SystemParameters_BANDWIDTH_DFBW_250_KHz;
  static constexpr BANDWIDTH DFBW_500_KHz =
    SystemParameters_BANDWIDTH_DFBW_500_KHz;
  static constexpr BANDWIDTH DFBW_1_MHz =
    SystemParameters_BANDWIDTH_DFBW_1_MHz;
  static constexpr BANDWIDTH DFBW_1M5_MHz =
    SystemParameters_BANDWIDTH_DFBW_1M5_MHz;
  static constexpr BANDWIDTH DFBW_2_MHz =
    SystemParameters_BANDWIDTH_DFBW_2_MHz;
  static constexpr BANDWIDTH DFBW_4_MHz =
    SystemParameters_BANDWIDTH_DFBW_4_MHz;
  static constexpr BANDWIDTH DFBW_33_MHz =
    SystemParameters_BANDWIDTH_DFBW_33_MHz;
  static constexpr BANDWIDTH DFBW_10_MHz =
    SystemParameters_BANDWIDTH_DFBW_10_MHz;
  static constexpr BANDWIDTH DFBW_20_MHz =
    SystemParameters_BANDWIDTH_DFBW_20_MHz;
  static constexpr BANDWIDTH DFBW_200_KHz =
    SystemParameters_BANDWIDTH_DFBW_200_KHz;
  static constexpr BANDWIDTH DFBW_WB =
    SystemParameters_BANDWIDTH_DFBW_WB;
  static constexpr BANDWIDTH DFBW_40_MHz =
    SystemParameters_BANDWIDTH_DFBW_40_MHz;
  static constexpr BANDWIDTH DFBW_80_MHz =
    SystemParameters_BANDWIDTH_DFBW_80_MHz;
  static inline bool BANDWIDTH_IsValid(int value) {
    return SystemParameters_BANDWIDTH_IsValid(value);
  }
  static constexpr BANDWIDTH BANDWIDTH_MIN =
    SystemParameters_BANDWIDTH_BANDWIDTH_MIN;
  static constexpr BANDWIDTH BANDWIDTH_MAX =
    SystemParameters_BANDWIDTH_BANDWIDTH_MAX;
  static constexpr int BANDWIDTH_ARRAYSIZE =
    SystemParameters_BANDWIDTH_BANDWIDTH_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BANDWIDTH_descriptor() {
    return SystemParameters_BANDWIDTH_descriptor();
  }
  template<typename T>
  static inline const std::string& BANDWIDTH_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BANDWIDTH>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BANDWIDTH_Name.");
    return SystemParameters_BANDWIDTH_Name(enum_t_value);
  }
  static inline bool BANDWIDTH_Parse(const std::string& name,
      BANDWIDTH* value) {
    return SystemParameters_BANDWIDTH_Parse(name, value);
  }

  typedef SystemParameters_FILTERS FILTERS;
  static constexpr FILTERS WideBand =
    SystemParameters_FILTERS_WideBand;
  static constexpr FILTERS _100Hz =
    SystemParameters_FILTERS__100Hz;
  static constexpr FILTERS _300Hz =
    SystemParameters_FILTERS__300Hz;
  static constexpr FILTERS _600Hz =
    SystemParameters_FILTERS__600Hz;
  static constexpr FILTERS _1KHz =
    SystemParameters_FILTERS__1KHz;
  static constexpr FILTERS _1AND5KHz =
    SystemParameters_FILTERS__1AND5KHz;
  static constexpr FILTERS _2KHz =
    SystemParameters_FILTERS__2KHz;
  static constexpr FILTERS _3KHz =
    SystemParameters_FILTERS__3KHz;
  static constexpr FILTERS _7_5KHz =
    SystemParameters_FILTERS__7_5KHz;
  static constexpr FILTERS _15KHz =
    SystemParameters_FILTERS__15KHz;
  static constexpr FILTERS _30KHz =
    SystemParameters_FILTERS__30KHz;
  static constexpr FILTERS _50KHz =
    SystemParameters_FILTERS__50KHz;
  static constexpr FILTERS _120KHz =
    SystemParameters_FILTERS__120KHz;
  static constexpr FILTERS _150KHz =
    SystemParameters_FILTERS__150KHz;
  static constexpr FILTERS Filter_Count =
    SystemParameters_FILTERS_Filter_Count;
  static inline bool FILTERS_IsValid(int value) {
    return SystemParameters_FILTERS_IsValid(value);
  }
  static constexpr FILTERS FILTERS_MIN =
    SystemParameters_FILTERS_FILTERS_MIN;
  static constexpr FILTERS FILTERS_MAX =
    SystemParameters_FILTERS_FILTERS_MAX;
  static constexpr int FILTERS_ARRAYSIZE =
    SystemParameters_FILTERS_FILTERS_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FILTERS_descriptor() {
    return SystemParameters_FILTERS_descriptor();
  }
  template<typename T>
  static inline const std::string& FILTERS_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FILTERS>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FILTERS_Name.");
    return SystemParameters_FILTERS_Name(enum_t_value);
  }
  static inline bool FILTERS_Parse(const std::string& name,
      FILTERS* value) {
    return SystemParameters_FILTERS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMgcDataFieldNumber = 5,
    kAgcDataFieldNumber = 4,
    kRfheadFieldNumber = 6,
    kDemodFieldNumber = 7,
    kFftFieldNumber = 8,
    kSetSquelchFieldNumber = 9,
    kVolumeFieldNumber = 10,
    kAverageFieldNumber = 11,
    kBandwidthFieldNumber = 12,
    kFilterFieldNumber = 13,
  };
  // double mgcData = 5;
  void clear_mgcdata();
  double mgcdata() const;
  void set_mgcdata(double value);
  private:
  double _internal_mgcdata() const;
  void _internal_set_mgcdata(double value);
  public:

  // .SystemParameters.AGC agcData = 4;
  void clear_agcdata();
  ::SystemParameters_AGC agcdata() const;
  void set_agcdata(::SystemParameters_AGC value);
  private:
  ::SystemParameters_AGC _internal_agcdata() const;
  void _internal_set_agcdata(::SystemParameters_AGC value);
  public:

  // .SystemParameters.RFHEAD rfhead = 6;
  void clear_rfhead();
  ::SystemParameters_RFHEAD rfhead() const;
  void set_rfhead(::SystemParameters_RFHEAD value);
  private:
  ::SystemParameters_RFHEAD _internal_rfhead() const;
  void _internal_set_rfhead(::SystemParameters_RFHEAD value);
  public:

  // .SystemParameters.DEMOD demod = 7;
  void clear_demod();
  ::SystemParameters_DEMOD demod() const;
  void set_demod(::SystemParameters_DEMOD value);
  private:
  ::SystemParameters_DEMOD _internal_demod() const;
  void _internal_set_demod(::SystemParameters_DEMOD value);
  public:

  // .SystemParameters.FFTPOINT Fft = 8;
  void clear_fft();
  ::SystemParameters_FFTPOINT fft() const;
  void set_fft(::SystemParameters_FFTPOINT value);
  private:
  ::SystemParameters_FFTPOINT _internal_fft() const;
  void _internal_set_fft(::SystemParameters_FFTPOINT value);
  public:

  // bool SetSquelch = 9;
  void clear_setsquelch();
  bool setsquelch() const;
  void set_setsquelch(bool value);
  private:
  bool _internal_setsquelch() const;
  void _internal_set_setsquelch(bool value);
  public:

  // int32 volume = 10;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double Average = 11;
  void clear_average();
  double average() const;
  void set_average(double value);
  private:
  double _internal_average() const;
  void _internal_set_average(double value);
  public:

  // .SystemParameters.BANDWIDTH bandwidth = 12;
  void clear_bandwidth();
  ::SystemParameters_BANDWIDTH bandwidth() const;
  void set_bandwidth(::SystemParameters_BANDWIDTH value);
  private:
  ::SystemParameters_BANDWIDTH _internal_bandwidth() const;
  void _internal_set_bandwidth(::SystemParameters_BANDWIDTH value);
  public:

  // .SystemParameters.FILTERS filter = 13;
  void clear_filter();
  ::SystemParameters_FILTERS filter() const;
  void set_filter(::SystemParameters_FILTERS value);
  private:
  ::SystemParameters_FILTERS _internal_filter() const;
  void _internal_set_filter(::SystemParameters_FILTERS value);
  public:

  // @@protoc_insertion_point(class_scope:SystemParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double mgcdata_;
  int agcdata_;
  int rfhead_;
  int demod_;
  int fft_;
  bool setsquelch_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_;
  double average_;
  int bandwidth_;
  int filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class Frequency PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frequency) */ {
 public:
  inline Frequency() : Frequency(nullptr) {};
  virtual ~Frequency();

  Frequency(const Frequency& from);
  Frequency(Frequency&& from) noexcept
    : Frequency() {
    *this = ::std::move(from);
  }

  inline Frequency& operator=(const Frequency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frequency& operator=(Frequency&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frequency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frequency* internal_default_instance() {
    return reinterpret_cast<const Frequency*>(
               &_Frequency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Frequency& a, Frequency& b) {
    a.Swap(&b);
  }
  inline void Swap(Frequency* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frequency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frequency* New() const final {
    return CreateMaybeMessage<Frequency>(nullptr);
  }

  Frequency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frequency>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frequency& from);
  void MergeFrom(const Frequency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frequency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frequency";
  }
  protected:
  explicit Frequency(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreqFieldNumber = 14,
  };
  // double freq = 14;
  void clear_freq();
  double freq() const;
  void set_freq(double value);
  private:
  double _internal_freq() const;
  void _internal_set_freq(double value);
  public:

  // @@protoc_insertion_point(class_scope:Frequency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double freq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class Threshold PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Threshold) */ {
 public:
  inline Threshold() : Threshold(nullptr) {};
  virtual ~Threshold();

  Threshold(const Threshold& from);
  Threshold(Threshold&& from) noexcept
    : Threshold() {
    *this = ::std::move(from);
  }

  inline Threshold& operator=(const Threshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline Threshold& operator=(Threshold&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Threshold& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Threshold* internal_default_instance() {
    return reinterpret_cast<const Threshold*>(
               &_Threshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Threshold& a, Threshold& b) {
    a.Swap(&b);
  }
  inline void Swap(Threshold* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Threshold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Threshold* New() const final {
    return CreateMaybeMessage<Threshold>(nullptr);
  }

  Threshold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Threshold>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Threshold& from);
  void MergeFrom(const Threshold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Threshold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Threshold";
  }
  protected:
  explicit Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThrFieldNumber = 15,
  };
  // double thr = 15;
  void clear_thr();
  double thr() const;
  void set_thr(double value);
  private:
  double _internal_thr() const;
  void _internal_set_thr(double value);
  public:

  // @@protoc_insertion_point(class_scope:Threshold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double thr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class PSDDataRdyDOUBLE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PSDDataRdyDOUBLE) */ {
 public:
  inline PSDDataRdyDOUBLE() : PSDDataRdyDOUBLE(nullptr) {};
  virtual ~PSDDataRdyDOUBLE();

  PSDDataRdyDOUBLE(const PSDDataRdyDOUBLE& from);
  PSDDataRdyDOUBLE(PSDDataRdyDOUBLE&& from) noexcept
    : PSDDataRdyDOUBLE() {
    *this = ::std::move(from);
  }

  inline PSDDataRdyDOUBLE& operator=(const PSDDataRdyDOUBLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSDDataRdyDOUBLE& operator=(PSDDataRdyDOUBLE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSDDataRdyDOUBLE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSDDataRdyDOUBLE* internal_default_instance() {
    return reinterpret_cast<const PSDDataRdyDOUBLE*>(
               &_PSDDataRdyDOUBLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PSDDataRdyDOUBLE& a, PSDDataRdyDOUBLE& b) {
    a.Swap(&b);
  }
  inline void Swap(PSDDataRdyDOUBLE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PSDDataRdyDOUBLE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSDDataRdyDOUBLE* New() const final {
    return CreateMaybeMessage<PSDDataRdyDOUBLE>(nullptr);
  }

  PSDDataRdyDOUBLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSDDataRdyDOUBLE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSDDataRdyDOUBLE& from);
  void MergeFrom(const PSDDataRdyDOUBLE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSDDataRdyDOUBLE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PSDDataRdyDOUBLE";
  }
  protected:
  explicit PSDDataRdyDOUBLE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPsdDataFieldNumber = 17,
    kTypeFieldNumber = 1000,
    kSizeFieldNumber = 16,
  };
  // repeated double PsdData = 17;
  int psddata_size() const;
  private:
  int _internal_psddata_size() const;
  public:
  void clear_psddata();
  private:
  double _internal_psddata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_psddata() const;
  void _internal_add_psddata(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_psddata();
  public:
  double psddata(int index) const;
  void set_psddata(int index, double value);
  void add_psddata(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      psddata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_psddata();

  // string type = 1000;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 size = 16;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PSDDataRdyDOUBLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > psddata_;
  mutable std::atomic<int> _psddata_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class PSDDataRdyINT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PSDDataRdyINT) */ {
 public:
  inline PSDDataRdyINT() : PSDDataRdyINT(nullptr) {};
  virtual ~PSDDataRdyINT();

  PSDDataRdyINT(const PSDDataRdyINT& from);
  PSDDataRdyINT(PSDDataRdyINT&& from) noexcept
    : PSDDataRdyINT() {
    *this = ::std::move(from);
  }

  inline PSDDataRdyINT& operator=(const PSDDataRdyINT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSDDataRdyINT& operator=(PSDDataRdyINT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSDDataRdyINT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSDDataRdyINT* internal_default_instance() {
    return reinterpret_cast<const PSDDataRdyINT*>(
               &_PSDDataRdyINT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PSDDataRdyINT& a, PSDDataRdyINT& b) {
    a.Swap(&b);
  }
  inline void Swap(PSDDataRdyINT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PSDDataRdyINT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSDDataRdyINT* New() const final {
    return CreateMaybeMessage<PSDDataRdyINT>(nullptr);
  }

  PSDDataRdyINT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSDDataRdyINT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSDDataRdyINT& from);
  void MergeFrom(const PSDDataRdyINT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSDDataRdyINT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PSDDataRdyINT";
  }
  protected:
  explicit PSDDataRdyINT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPsdDataFieldNumber = 19,
    kSizeFieldNumber = 18,
  };
  // repeated int32 PsdData = 19;
  int psddata_size() const;
  private:
  int _internal_psddata_size() const;
  public:
  void clear_psddata();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_psddata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_psddata() const;
  void _internal_add_psddata(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_psddata();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 psddata(int index) const;
  void set_psddata(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_psddata(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      psddata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_psddata();

  // int32 size = 18;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PSDDataRdyINT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > psddata_;
  mutable std::atomic<int> _psddata_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class DOADataRdydouble PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DOADataRdydouble) */ {
 public:
  inline DOADataRdydouble() : DOADataRdydouble(nullptr) {};
  virtual ~DOADataRdydouble();

  DOADataRdydouble(const DOADataRdydouble& from);
  DOADataRdydouble(DOADataRdydouble&& from) noexcept
    : DOADataRdydouble() {
    *this = ::std::move(from);
  }

  inline DOADataRdydouble& operator=(const DOADataRdydouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline DOADataRdydouble& operator=(DOADataRdydouble&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DOADataRdydouble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DOADataRdydouble* internal_default_instance() {
    return reinterpret_cast<const DOADataRdydouble*>(
               &_DOADataRdydouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DOADataRdydouble& a, DOADataRdydouble& b) {
    a.Swap(&b);
  }
  inline void Swap(DOADataRdydouble* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DOADataRdydouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DOADataRdydouble* New() const final {
    return CreateMaybeMessage<DOADataRdydouble>(nullptr);
  }

  DOADataRdydouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DOADataRdydouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DOADataRdydouble& from);
  void MergeFrom(const DOADataRdydouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DOADataRdydouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DOADataRdydouble";
  }
  protected:
  explicit DOADataRdydouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDOADataFieldNumber = 21,
    kTypeFieldNumber = 1001,
    kSizeFieldNumber = 20,
  };
  // repeated double DOAData = 21;
  int doadata_size() const;
  private:
  int _internal_doadata_size() const;
  public:
  void clear_doadata();
  private:
  double _internal_doadata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_doadata() const;
  void _internal_add_doadata(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_doadata();
  public:
  double doadata(int index) const;
  void set_doadata(int index, double value);
  void add_doadata(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      doadata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_doadata();

  // string type = 1001;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 size = 20;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DOADataRdydouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > doadata_;
  mutable std::atomic<int> _doadata_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class DOADataRdyshort PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DOADataRdyshort) */ {
 public:
  inline DOADataRdyshort() : DOADataRdyshort(nullptr) {};
  virtual ~DOADataRdyshort();

  DOADataRdyshort(const DOADataRdyshort& from);
  DOADataRdyshort(DOADataRdyshort&& from) noexcept
    : DOADataRdyshort() {
    *this = ::std::move(from);
  }

  inline DOADataRdyshort& operator=(const DOADataRdyshort& from) {
    CopyFrom(from);
    return *this;
  }
  inline DOADataRdyshort& operator=(DOADataRdyshort&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DOADataRdyshort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DOADataRdyshort* internal_default_instance() {
    return reinterpret_cast<const DOADataRdyshort*>(
               &_DOADataRdyshort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DOADataRdyshort& a, DOADataRdyshort& b) {
    a.Swap(&b);
  }
  inline void Swap(DOADataRdyshort* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DOADataRdyshort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DOADataRdyshort* New() const final {
    return CreateMaybeMessage<DOADataRdyshort>(nullptr);
  }

  DOADataRdyshort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DOADataRdyshort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DOADataRdyshort& from);
  void MergeFrom(const DOADataRdyshort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DOADataRdyshort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DOADataRdyshort";
  }
  protected:
  explicit DOADataRdyshort(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoaDataFieldNumber = 23,
    kSizeFieldNumber = 22,
  };
  // repeated int32 DoaData = 23;
  int doadata_size() const;
  private:
  int _internal_doadata_size() const;
  public:
  void clear_doadata();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_doadata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_doadata() const;
  void _internal_add_doadata(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_doadata();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 doadata(int index) const;
  void set_doadata(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_doadata(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      doadata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_doadata();

  // int32 size = 22;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DOADataRdyshort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > doadata_;
  mutable std::atomic<int> _doadata_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class AudioDataRdy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AudioDataRdy) */ {
 public:
  inline AudioDataRdy() : AudioDataRdy(nullptr) {};
  virtual ~AudioDataRdy();

  AudioDataRdy(const AudioDataRdy& from);
  AudioDataRdy(AudioDataRdy&& from) noexcept
    : AudioDataRdy() {
    *this = ::std::move(from);
  }

  inline AudioDataRdy& operator=(const AudioDataRdy& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioDataRdy& operator=(AudioDataRdy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioDataRdy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioDataRdy* internal_default_instance() {
    return reinterpret_cast<const AudioDataRdy*>(
               &_AudioDataRdy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AudioDataRdy& a, AudioDataRdy& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioDataRdy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioDataRdy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioDataRdy* New() const final {
    return CreateMaybeMessage<AudioDataRdy>(nullptr);
  }

  AudioDataRdy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioDataRdy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioDataRdy& from);
  void MergeFrom(const AudioDataRdy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioDataRdy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AudioDataRdy";
  }
  protected:
  explicit AudioDataRdy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioDataFieldNumber = 25,
    kSizeFieldNumber = 24,
  };
  // repeated bytes AudioData = 25;
  int audiodata_size() const;
  private:
  int _internal_audiodata_size() const;
  public:
  void clear_audiodata();
  const std::string& audiodata(int index) const;
  std::string* mutable_audiodata(int index);
  void set_audiodata(int index, const std::string& value);
  void set_audiodata(int index, std::string&& value);
  void set_audiodata(int index, const char* value);
  void set_audiodata(int index, const void* value, size_t size);
  std::string* add_audiodata();
  void add_audiodata(const std::string& value);
  void add_audiodata(std::string&& value);
  void add_audiodata(const char* value);
  void add_audiodata(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& audiodata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_audiodata();
  private:
  const std::string& _internal_audiodata(int index) const;
  std::string* _internal_add_audiodata();
  public:

  // int32 size = 24;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AudioDataRdy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> audiodata_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class AudioState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AudioState) */ {
 public:
  inline AudioState() : AudioState(nullptr) {};
  virtual ~AudioState();

  AudioState(const AudioState& from);
  AudioState(AudioState&& from) noexcept
    : AudioState() {
    *this = ::std::move(from);
  }

  inline AudioState& operator=(const AudioState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioState& operator=(AudioState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioState* internal_default_instance() {
    return reinterpret_cast<const AudioState*>(
               &_AudioState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AudioState& a, AudioState& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioState* New() const final {
    return CreateMaybeMessage<AudioState>(nullptr);
  }

  AudioState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioState& from);
  void MergeFrom(const AudioState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AudioState";
  }
  protected:
  explicit AudioState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 26,
  };
  // bool audio = 26;
  void clear_audio();
  bool audio() const;
  void set_audio(bool value);
  private:
  bool _internal_audio() const;
  void _internal_set_audio(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AudioState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool audio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class GPSParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GPSParameter) */ {
 public:
  inline GPSParameter() : GPSParameter(nullptr) {};
  virtual ~GPSParameter();

  GPSParameter(const GPSParameter& from);
  GPSParameter(GPSParameter&& from) noexcept
    : GPSParameter() {
    *this = ::std::move(from);
  }

  inline GPSParameter& operator=(const GPSParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSParameter& operator=(GPSParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSParameter* internal_default_instance() {
    return reinterpret_cast<const GPSParameter*>(
               &_GPSParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GPSParameter& a, GPSParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPSParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSParameter* New() const final {
    return CreateMaybeMessage<GPSParameter>(nullptr);
  }

  GPSParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSParameter& from);
  void MergeFrom(const GPSParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GPSParameter";
  }
  protected:
  explicit GPSParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 27,
    kLongFieldNumber = 28,
    kCompassOffsetFieldNumber = 29,
    kAzimuthFieldNumber = 30,
  };
  // double Lat = 27;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double long = 28;
  void clear_long_();
  double long_() const;
  void set_long_(double value);
  private:
  double _internal_long_() const;
  void _internal_set_long_(double value);
  public:

  // double compassOffset = 29;
  void clear_compassoffset();
  double compassoffset() const;
  void set_compassoffset(double value);
  private:
  double _internal_compassoffset() const;
  void _internal_set_compassoffset(double value);
  public:

  // double azimuth = 30;
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);
  private:
  double _internal_azimuth() const;
  void _internal_set_azimuth(double value);
  public:

  // @@protoc_insertion_point(class_scope:GPSParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double long__;
  double compassoffset_;
  double azimuth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class AntennaState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AntennaState) */ {
 public:
  inline AntennaState() : AntennaState(nullptr) {};
  virtual ~AntennaState();

  AntennaState(const AntennaState& from);
  AntennaState(AntennaState&& from) noexcept
    : AntennaState() {
    *this = ::std::move(from);
  }

  inline AntennaState& operator=(const AntennaState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaState& operator=(AntennaState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AntennaState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AntennaState* internal_default_instance() {
    return reinterpret_cast<const AntennaState*>(
               &_AntennaState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AntennaState& a, AntennaState& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AntennaState* New() const final {
    return CreateMaybeMessage<AntennaState>(nullptr);
  }

  AntennaState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AntennaState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AntennaState& from);
  void MergeFrom(const AntennaState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AntennaState";
  }
  protected:
  explicit AntennaState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kADD050FieldNumber = 31,
    kADD150FieldNumber = 32,
    kADD078FieldNumber = 33,
    kADD070FieldNumber = 34,
    kADD327FieldNumber = 35,
    kADD207FieldNumber = 36,
    kADD107FieldNumber = 37,
    kADD227FieldNumber = 38,
  };
  // bool ADD050 = 31;
  void clear_add050();
  bool add050() const;
  void set_add050(bool value);
  private:
  bool _internal_add050() const;
  void _internal_set_add050(bool value);
  public:

  // bool ADD150 = 32;
  void clear_add150();
  bool add150() const;
  void set_add150(bool value);
  private:
  bool _internal_add150() const;
  void _internal_set_add150(bool value);
  public:

  // bool ADD078 = 33;
  void clear_add078();
  bool add078() const;
  void set_add078(bool value);
  private:
  bool _internal_add078() const;
  void _internal_set_add078(bool value);
  public:

  // bool ADD070 = 34;
  void clear_add070();
  bool add070() const;
  void set_add070(bool value);
  private:
  bool _internal_add070() const;
  void _internal_set_add070(bool value);
  public:

  // bool ADD327 = 35;
  void clear_add327();
  bool add327() const;
  void set_add327(bool value);
  private:
  bool _internal_add327() const;
  void _internal_set_add327(bool value);
  public:

  // bool ADD207 = 36;
  void clear_add207();
  bool add207() const;
  void set_add207(bool value);
  private:
  bool _internal_add207() const;
  void _internal_set_add207(bool value);
  public:

  // bool ADD107 = 37;
  void clear_add107();
  bool add107() const;
  void set_add107(bool value);
  private:
  bool _internal_add107() const;
  void _internal_set_add107(bool value);
  public:

  // bool ADD227 = 38;
  void clear_add227();
  bool add227() const;
  void set_add227(bool value);
  private:
  bool _internal_add227() const;
  void _internal_set_add227(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AntennaState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool add050_;
  bool add150_;
  bool add078_;
  bool add070_;
  bool add327_;
  bool add207_;
  bool add107_;
  bool add227_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class AntennaOFFset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AntennaOFFset) */ {
 public:
  inline AntennaOFFset() : AntennaOFFset(nullptr) {};
  virtual ~AntennaOFFset();

  AntennaOFFset(const AntennaOFFset& from);
  AntennaOFFset(AntennaOFFset&& from) noexcept
    : AntennaOFFset() {
    *this = ::std::move(from);
  }

  inline AntennaOFFset& operator=(const AntennaOFFset& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntennaOFFset& operator=(AntennaOFFset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AntennaOFFset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AntennaOFFset* internal_default_instance() {
    return reinterpret_cast<const AntennaOFFset*>(
               &_AntennaOFFset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AntennaOFFset& a, AntennaOFFset& b) {
    a.Swap(&b);
  }
  inline void Swap(AntennaOFFset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntennaOFFset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AntennaOFFset* New() const final {
    return CreateMaybeMessage<AntennaOFFset>(nullptr);
  }

  AntennaOFFset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AntennaOFFset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AntennaOFFset& from);
  void MergeFrom(const AntennaOFFset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntennaOFFset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AntennaOFFset";
  }
  protected:
  explicit AntennaOFFset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kADD050FieldNumber = 39,
    kADD150FieldNumber = 40,
    kADD078FieldNumber = 41,
    kADD070FieldNumber = 42,
    kADD327FieldNumber = 43,
    kADD207FieldNumber = 44,
    kADD107FieldNumber = 45,
    kADD227FieldNumber = 46,
  };
  // double ADD050 = 39;
  void clear_add050();
  double add050() const;
  void set_add050(double value);
  private:
  double _internal_add050() const;
  void _internal_set_add050(double value);
  public:

  // double ADD150 = 40;
  void clear_add150();
  double add150() const;
  void set_add150(double value);
  private:
  double _internal_add150() const;
  void _internal_set_add150(double value);
  public:

  // double ADD078 = 41;
  void clear_add078();
  double add078() const;
  void set_add078(double value);
  private:
  double _internal_add078() const;
  void _internal_set_add078(double value);
  public:

  // double ADD070 = 42;
  void clear_add070();
  double add070() const;
  void set_add070(double value);
  private:
  double _internal_add070() const;
  void _internal_set_add070(double value);
  public:

  // double ADD327 = 43;
  void clear_add327();
  double add327() const;
  void set_add327(double value);
  private:
  double _internal_add327() const;
  void _internal_set_add327(double value);
  public:

  // double ADD207 = 44;
  void clear_add207();
  double add207() const;
  void set_add207(double value);
  private:
  double _internal_add207() const;
  void _internal_set_add207(double value);
  public:

  // double ADD107 = 45;
  void clear_add107();
  double add107() const;
  void set_add107(double value);
  private:
  double _internal_add107() const;
  void _internal_set_add107(double value);
  public:

  // double ADD227 = 46;
  void clear_add227();
  double add227() const;
  void set_add227(double value);
  private:
  double _internal_add227() const;
  void _internal_set_add227(double value);
  public:

  // @@protoc_insertion_point(class_scope:AntennaOFFset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double add050_;
  double add150_;
  double add078_;
  double add070_;
  double add327_;
  double add207_;
  double add107_;
  double add227_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class Defaults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Defaults) */ {
 public:
  inline Defaults() : Defaults(nullptr) {};
  virtual ~Defaults();

  Defaults(const Defaults& from);
  Defaults(Defaults&& from) noexcept
    : Defaults() {
    *this = ::std::move(from);
  }

  inline Defaults& operator=(const Defaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline Defaults& operator=(Defaults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Defaults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Defaults* internal_default_instance() {
    return reinterpret_cast<const Defaults*>(
               &_Defaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Defaults& a, Defaults& b) {
    a.Swap(&b);
  }
  inline void Swap(Defaults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Defaults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Defaults* New() const final {
    return CreateMaybeMessage<Defaults>(nullptr);
  }

  Defaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Defaults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Defaults& from);
  void MergeFrom(const Defaults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Defaults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Defaults";
  }
  protected:
  explicit Defaults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Defaults_SYSTEMTYPE SYSTEMTYPE;
  static constexpr SYSTEMTYPE mobin =
    Defaults_SYSTEMTYPE_mobin;
  static constexpr SYSTEMTYPE miadI =
    Defaults_SYSTEMTYPE_miadI;
  static constexpr SYSTEMTYPE miadII =
    Defaults_SYSTEMTYPE_miadII;
  static inline bool SYSTEMTYPE_IsValid(int value) {
    return Defaults_SYSTEMTYPE_IsValid(value);
  }
  static constexpr SYSTEMTYPE SYSTEMTYPE_MIN =
    Defaults_SYSTEMTYPE_SYSTEMTYPE_MIN;
  static constexpr SYSTEMTYPE SYSTEMTYPE_MAX =
    Defaults_SYSTEMTYPE_SYSTEMTYPE_MAX;
  static constexpr int SYSTEMTYPE_ARRAYSIZE =
    Defaults_SYSTEMTYPE_SYSTEMTYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SYSTEMTYPE_descriptor() {
    return Defaults_SYSTEMTYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& SYSTEMTYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SYSTEMTYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SYSTEMTYPE_Name.");
    return Defaults_SYSTEMTYPE_Name(enum_t_value);
  }
  static inline bool SYSTEMTYPE_Parse(const std::string& name,
      SYSTEMTYPE* value) {
    return Defaults_SYSTEMTYPE_Parse(name, value);
  }

  typedef Defaults_BW BW;
  static constexpr BW _20MHz =
    Defaults_BW__20MHz;
  static constexpr BW _40MHz =
    Defaults_BW__40MHz;
  static inline bool BW_IsValid(int value) {
    return Defaults_BW_IsValid(value);
  }
  static constexpr BW BW_MIN =
    Defaults_BW_BW_MIN;
  static constexpr BW BW_MAX =
    Defaults_BW_BW_MAX;
  static constexpr int BW_ARRAYSIZE =
    Defaults_BW_BW_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BW_descriptor() {
    return Defaults_BW_descriptor();
  }
  template<typename T>
  static inline const std::string& BW_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BW>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BW_Name.");
    return Defaults_BW_Name(enum_t_value);
  }
  static inline bool BW_Parse(const std::string& name,
      BW* value) {
    return Defaults_BW_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSystemtypeFieldNumber = 47,
    kWideBandBanwithFieldNumber = 48,
    kMinimumFreqRangeFieldNumber = 49,
    kMaximumFreqRangeFieldNumber = 50,
  };
  // .Defaults.SYSTEMTYPE systemtype = 47;
  void clear_systemtype();
  ::Defaults_SYSTEMTYPE systemtype() const;
  void set_systemtype(::Defaults_SYSTEMTYPE value);
  private:
  ::Defaults_SYSTEMTYPE _internal_systemtype() const;
  void _internal_set_systemtype(::Defaults_SYSTEMTYPE value);
  public:

  // .Defaults.BW WideBandBanwith = 48;
  void clear_widebandbanwith();
  ::Defaults_BW widebandbanwith() const;
  void set_widebandbanwith(::Defaults_BW value);
  private:
  ::Defaults_BW _internal_widebandbanwith() const;
  void _internal_set_widebandbanwith(::Defaults_BW value);
  public:

  // int32 MinimumFreqRange = 49;
  void clear_minimumfreqrange();
  ::PROTOBUF_NAMESPACE_ID::int32 minimumfreqrange() const;
  void set_minimumfreqrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minimumfreqrange() const;
  void _internal_set_minimumfreqrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MaximumFreqRange = 50;
  void clear_maximumfreqrange();
  ::PROTOBUF_NAMESPACE_ID::int32 maximumfreqrange() const;
  void set_maximumfreqrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maximumfreqrange() const;
  void _internal_set_maximumfreqrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Defaults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int systemtype_;
  int widebandbanwith_;
  ::PROTOBUF_NAMESPACE_ID::int32 minimumfreqrange_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximumfreqrange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class ClassificationState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClassificationState) */ {
 public:
  inline ClassificationState() : ClassificationState(nullptr) {};
  virtual ~ClassificationState();

  ClassificationState(const ClassificationState& from);
  ClassificationState(ClassificationState&& from) noexcept
    : ClassificationState() {
    *this = ::std::move(from);
  }

  inline ClassificationState& operator=(const ClassificationState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationState& operator=(ClassificationState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassificationState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassificationState* internal_default_instance() {
    return reinterpret_cast<const ClassificationState*>(
               &_ClassificationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ClassificationState& a, ClassificationState& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassificationState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassificationState* New() const final {
    return CreateMaybeMessage<ClassificationState>(nullptr);
  }

  ClassificationState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassificationState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassificationState& from);
  void MergeFrom(const ClassificationState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClassificationState";
  }
  protected:
  explicit ClassificationState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 51,
  };
  // bool state = 51;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClassificationState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class ClassificationDataRdy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClassificationDataRdy) */ {
 public:
  inline ClassificationDataRdy() : ClassificationDataRdy(nullptr) {};
  virtual ~ClassificationDataRdy();

  ClassificationDataRdy(const ClassificationDataRdy& from);
  ClassificationDataRdy(ClassificationDataRdy&& from) noexcept
    : ClassificationDataRdy() {
    *this = ::std::move(from);
  }

  inline ClassificationDataRdy& operator=(const ClassificationDataRdy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationDataRdy& operator=(ClassificationDataRdy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassificationDataRdy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassificationDataRdy* internal_default_instance() {
    return reinterpret_cast<const ClassificationDataRdy*>(
               &_ClassificationDataRdy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ClassificationDataRdy& a, ClassificationDataRdy& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassificationDataRdy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationDataRdy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassificationDataRdy* New() const final {
    return CreateMaybeMessage<ClassificationDataRdy>(nullptr);
  }

  ClassificationDataRdy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassificationDataRdy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassificationDataRdy& from);
  void MergeFrom(const ClassificationDataRdy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationDataRdy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClassificationDataRdy";
  }
  protected:
  explicit ClassificationDataRdy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClassificationDataRdy_SINGALMODE SINGALMODE;
  static constexpr SINGALMODE Fix =
    ClassificationDataRdy_SINGALMODE_Fix;
  static constexpr SINGALMODE DS =
    ClassificationDataRdy_SINGALMODE_DS;
  static constexpr SINGALMODE Hopping =
    ClassificationDataRdy_SINGALMODE_Hopping;
  static inline bool SINGALMODE_IsValid(int value) {
    return ClassificationDataRdy_SINGALMODE_IsValid(value);
  }
  static constexpr SINGALMODE SINGALMODE_MIN =
    ClassificationDataRdy_SINGALMODE_SINGALMODE_MIN;
  static constexpr SINGALMODE SINGALMODE_MAX =
    ClassificationDataRdy_SINGALMODE_SINGALMODE_MAX;
  static constexpr int SINGALMODE_ARRAYSIZE =
    ClassificationDataRdy_SINGALMODE_SINGALMODE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SINGALMODE_descriptor() {
    return ClassificationDataRdy_SINGALMODE_descriptor();
  }
  template<typename T>
  static inline const std::string& SINGALMODE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SINGALMODE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SINGALMODE_Name.");
    return ClassificationDataRdy_SINGALMODE_Name(enum_t_value);
  }
  static inline bool SINGALMODE_Parse(const std::string& name,
      SINGALMODE* value) {
    return ClassificationDataRdy_SINGALMODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignalModeFieldNumber = 52,
    kStartIndexFieldNumber = 53,
    kStopIndexFieldNumber = 54,
    kCenterIndexFieldNumber = 55,
    kAzimuthFieldNumber = 56,
  };
  // .ClassificationDataRdy.SINGALMODE SignalMode = 52;
  void clear_signalmode();
  ::ClassificationDataRdy_SINGALMODE signalmode() const;
  void set_signalmode(::ClassificationDataRdy_SINGALMODE value);
  private:
  ::ClassificationDataRdy_SINGALMODE _internal_signalmode() const;
  void _internal_set_signalmode(::ClassificationDataRdy_SINGALMODE value);
  public:

  // int32 startIndex = 53;
  void clear_startindex();
  ::PROTOBUF_NAMESPACE_ID::int32 startindex() const;
  void set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startindex() const;
  void _internal_set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 StopIndex = 54;
  void clear_stopindex();
  ::PROTOBUF_NAMESPACE_ID::int32 stopindex() const;
  void set_stopindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stopindex() const;
  void _internal_set_stopindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CenterIndex = 55;
  void clear_centerindex();
  ::PROTOBUF_NAMESPACE_ID::int32 centerindex() const;
  void set_centerindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_centerindex() const;
  void _internal_set_centerindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double Azimuth = 56;
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);
  private:
  double _internal_azimuth() const;
  void _internal_set_azimuth(double value);
  public:

  // @@protoc_insertion_point(class_scope:ClassificationDataRdy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int signalmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 startindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 stopindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 centerindex_;
  double azimuth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class DFstate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DFstate) */ {
 public:
  inline DFstate() : DFstate(nullptr) {};
  virtual ~DFstate();

  DFstate(const DFstate& from);
  DFstate(DFstate&& from) noexcept
    : DFstate() {
    *this = ::std::move(from);
  }

  inline DFstate& operator=(const DFstate& from) {
    CopyFrom(from);
    return *this;
  }
  inline DFstate& operator=(DFstate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DFstate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DFstate* internal_default_instance() {
    return reinterpret_cast<const DFstate*>(
               &_DFstate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DFstate& a, DFstate& b) {
    a.Swap(&b);
  }
  inline void Swap(DFstate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DFstate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DFstate* New() const final {
    return CreateMaybeMessage<DFstate>(nullptr);
  }

  DFstate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DFstate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DFstate& from);
  void MergeFrom(const DFstate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DFstate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DFstate";
  }
  protected:
  explicit DFstate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFStartStopFieldNumber = 57,
  };
  // bool DFStartStop = 57;
  void clear_dfstartstop();
  bool dfstartstop() const;
  void set_dfstartstop(bool value);
  private:
  bool _internal_dfstartstop() const;
  void _internal_set_dfstartstop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DFstate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool dfstartstop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// -------------------------------------------------------------------

class TransferData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransferData) */ {
 public:
  inline TransferData() : TransferData(nullptr) {};
  virtual ~TransferData();

  TransferData(const TransferData& from);
  TransferData(TransferData&& from) noexcept
    : TransferData() {
    *this = ::std::move(from);
  }

  inline TransferData& operator=(const TransferData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferData& operator=(TransferData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferData* internal_default_instance() {
    return reinterpret_cast<const TransferData*>(
               &_TransferData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TransferData& a, TransferData& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferData* New() const final {
    return CreateMaybeMessage<TransferData>(nullptr);
  }

  TransferData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferData& from);
  void MergeFrom(const TransferData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransferData";
  }
  protected:
  explicit TransferData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Connection_2eproto);
    return ::descriptor_table_Connection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TransferData_TRANSDATA TRANSDATA;
  static constexpr TRANSDATA _10Percent =
    TransferData_TRANSDATA__10Percent;
  static constexpr TRANSDATA _20Percent =
    TransferData_TRANSDATA__20Percent;
  static constexpr TRANSDATA _50Percent =
    TransferData_TRANSDATA__50Percent;
  static constexpr TRANSDATA _75Percent =
    TransferData_TRANSDATA__75Percent;
  static constexpr TRANSDATA _100Percent =
    TransferData_TRANSDATA__100Percent;
  static inline bool TRANSDATA_IsValid(int value) {
    return TransferData_TRANSDATA_IsValid(value);
  }
  static constexpr TRANSDATA TRANSDATA_MIN =
    TransferData_TRANSDATA_TRANSDATA_MIN;
  static constexpr TRANSDATA TRANSDATA_MAX =
    TransferData_TRANSDATA_TRANSDATA_MAX;
  static constexpr int TRANSDATA_ARRAYSIZE =
    TransferData_TRANSDATA_TRANSDATA_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TRANSDATA_descriptor() {
    return TransferData_TRANSDATA_descriptor();
  }
  template<typename T>
  static inline const std::string& TRANSDATA_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TRANSDATA>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TRANSDATA_Name.");
    return TransferData_TRANSDATA_Name(enum_t_value);
  }
  static inline bool TRANSDATA_Parse(const std::string& name,
      TRANSDATA* value) {
    return TransferData_TRANSDATA_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTransferDFParametersFieldNumber = 63,
    kTransferDataRangeFieldNumber = 58,
    kTransferAudioFieldNumber = 59,
    kTransferPSDFieldNumber = 60,
    kTransferDOAFieldNumber = 61,
    kTransferSystemParametersFieldNumber = 62,
  };
  // bool TransferDFParameters = 63;
  void clear_transferdfparameters();
  bool transferdfparameters() const;
  void set_transferdfparameters(bool value);
  private:
  bool _internal_transferdfparameters() const;
  void _internal_set_transferdfparameters(bool value);
  public:

  // .TransferData.TRANSDATA TransferDataRange = 58;
  void clear_transferdatarange();
  ::TransferData_TRANSDATA transferdatarange() const;
  void set_transferdatarange(::TransferData_TRANSDATA value);
  private:
  ::TransferData_TRANSDATA _internal_transferdatarange() const;
  void _internal_set_transferdatarange(::TransferData_TRANSDATA value);
  public:

  // bool TransferAudio = 59;
  void clear_transferaudio();
  bool transferaudio() const;
  void set_transferaudio(bool value);
  private:
  bool _internal_transferaudio() const;
  void _internal_set_transferaudio(bool value);
  public:

  // bool TransferPSD = 60;
  void clear_transferpsd();
  bool transferpsd() const;
  void set_transferpsd(bool value);
  private:
  bool _internal_transferpsd() const;
  void _internal_set_transferpsd(bool value);
  public:

  // bool TransferDOA = 61;
  void clear_transferdoa();
  bool transferdoa() const;
  void set_transferdoa(bool value);
  private:
  bool _internal_transferdoa() const;
  void _internal_set_transferdoa(bool value);
  public:

  // bool TransferSystemParameters = 62;
  void clear_transfersystemparameters();
  bool transfersystemparameters() const;
  void set_transfersystemparameters(bool value);
  private:
  bool _internal_transfersystemparameters() const;
  void _internal_set_transfersystemparameters(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TransferData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool transferdfparameters_;
  int transferdatarange_;
  bool transferaudio_;
  bool transferpsd_;
  bool transferdoa_;
  bool transfersystemparameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Connection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DFarameters

// double Azimuth = 1;
inline void DFarameters::clear_azimuth() {
  azimuth_ = 0;
}
inline double DFarameters::_internal_azimuth() const {
  return azimuth_;
}
inline double DFarameters::azimuth() const {
  // @@protoc_insertion_point(field_get:DFarameters.Azimuth)
  return _internal_azimuth();
}
inline void DFarameters::_internal_set_azimuth(double value) {
  
  azimuth_ = value;
}
inline void DFarameters::set_azimuth(double value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:DFarameters.Azimuth)
}

// double Quality = 2;
inline void DFarameters::clear_quality() {
  quality_ = 0;
}
inline double DFarameters::_internal_quality() const {
  return quality_;
}
inline double DFarameters::quality() const {
  // @@protoc_insertion_point(field_get:DFarameters.Quality)
  return _internal_quality();
}
inline void DFarameters::_internal_set_quality(double value) {
  
  quality_ = value;
}
inline void DFarameters::set_quality(double value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:DFarameters.Quality)
}

// double level = 3;
inline void DFarameters::clear_level() {
  level_ = 0;
}
inline double DFarameters::_internal_level() const {
  return level_;
}
inline double DFarameters::level() const {
  // @@protoc_insertion_point(field_get:DFarameters.level)
  return _internal_level();
}
inline void DFarameters::_internal_set_level(double value) {
  
  level_ = value;
}
inline void DFarameters::set_level(double value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:DFarameters.level)
}

// -------------------------------------------------------------------

// SystemParameters

// .SystemParameters.AGC agcData = 4;
inline void SystemParameters::clear_agcdata() {
  agcdata_ = 0;
}
inline ::SystemParameters_AGC SystemParameters::_internal_agcdata() const {
  return static_cast< ::SystemParameters_AGC >(agcdata_);
}
inline ::SystemParameters_AGC SystemParameters::agcdata() const {
  // @@protoc_insertion_point(field_get:SystemParameters.agcData)
  return _internal_agcdata();
}
inline void SystemParameters::_internal_set_agcdata(::SystemParameters_AGC value) {
  
  agcdata_ = value;
}
inline void SystemParameters::set_agcdata(::SystemParameters_AGC value) {
  _internal_set_agcdata(value);
  // @@protoc_insertion_point(field_set:SystemParameters.agcData)
}

// double mgcData = 5;
inline void SystemParameters::clear_mgcdata() {
  mgcdata_ = 0;
}
inline double SystemParameters::_internal_mgcdata() const {
  return mgcdata_;
}
inline double SystemParameters::mgcdata() const {
  // @@protoc_insertion_point(field_get:SystemParameters.mgcData)
  return _internal_mgcdata();
}
inline void SystemParameters::_internal_set_mgcdata(double value) {
  
  mgcdata_ = value;
}
inline void SystemParameters::set_mgcdata(double value) {
  _internal_set_mgcdata(value);
  // @@protoc_insertion_point(field_set:SystemParameters.mgcData)
}

// .SystemParameters.RFHEAD rfhead = 6;
inline void SystemParameters::clear_rfhead() {
  rfhead_ = 0;
}
inline ::SystemParameters_RFHEAD SystemParameters::_internal_rfhead() const {
  return static_cast< ::SystemParameters_RFHEAD >(rfhead_);
}
inline ::SystemParameters_RFHEAD SystemParameters::rfhead() const {
  // @@protoc_insertion_point(field_get:SystemParameters.rfhead)
  return _internal_rfhead();
}
inline void SystemParameters::_internal_set_rfhead(::SystemParameters_RFHEAD value) {
  
  rfhead_ = value;
}
inline void SystemParameters::set_rfhead(::SystemParameters_RFHEAD value) {
  _internal_set_rfhead(value);
  // @@protoc_insertion_point(field_set:SystemParameters.rfhead)
}

// .SystemParameters.DEMOD demod = 7;
inline void SystemParameters::clear_demod() {
  demod_ = 0;
}
inline ::SystemParameters_DEMOD SystemParameters::_internal_demod() const {
  return static_cast< ::SystemParameters_DEMOD >(demod_);
}
inline ::SystemParameters_DEMOD SystemParameters::demod() const {
  // @@protoc_insertion_point(field_get:SystemParameters.demod)
  return _internal_demod();
}
inline void SystemParameters::_internal_set_demod(::SystemParameters_DEMOD value) {
  
  demod_ = value;
}
inline void SystemParameters::set_demod(::SystemParameters_DEMOD value) {
  _internal_set_demod(value);
  // @@protoc_insertion_point(field_set:SystemParameters.demod)
}

// .SystemParameters.FFTPOINT Fft = 8;
inline void SystemParameters::clear_fft() {
  fft_ = 0;
}
inline ::SystemParameters_FFTPOINT SystemParameters::_internal_fft() const {
  return static_cast< ::SystemParameters_FFTPOINT >(fft_);
}
inline ::SystemParameters_FFTPOINT SystemParameters::fft() const {
  // @@protoc_insertion_point(field_get:SystemParameters.Fft)
  return _internal_fft();
}
inline void SystemParameters::_internal_set_fft(::SystemParameters_FFTPOINT value) {
  
  fft_ = value;
}
inline void SystemParameters::set_fft(::SystemParameters_FFTPOINT value) {
  _internal_set_fft(value);
  // @@protoc_insertion_point(field_set:SystemParameters.Fft)
}

// bool SetSquelch = 9;
inline void SystemParameters::clear_setsquelch() {
  setsquelch_ = false;
}
inline bool SystemParameters::_internal_setsquelch() const {
  return setsquelch_;
}
inline bool SystemParameters::setsquelch() const {
  // @@protoc_insertion_point(field_get:SystemParameters.SetSquelch)
  return _internal_setsquelch();
}
inline void SystemParameters::_internal_set_setsquelch(bool value) {
  
  setsquelch_ = value;
}
inline void SystemParameters::set_setsquelch(bool value) {
  _internal_set_setsquelch(value);
  // @@protoc_insertion_point(field_set:SystemParameters.SetSquelch)
}

// int32 volume = 10;
inline void SystemParameters::clear_volume() {
  volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemParameters::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemParameters::volume() const {
  // @@protoc_insertion_point(field_get:SystemParameters.volume)
  return _internal_volume();
}
inline void SystemParameters::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_ = value;
}
inline void SystemParameters::set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:SystemParameters.volume)
}

// double Average = 11;
inline void SystemParameters::clear_average() {
  average_ = 0;
}
inline double SystemParameters::_internal_average() const {
  return average_;
}
inline double SystemParameters::average() const {
  // @@protoc_insertion_point(field_get:SystemParameters.Average)
  return _internal_average();
}
inline void SystemParameters::_internal_set_average(double value) {
  
  average_ = value;
}
inline void SystemParameters::set_average(double value) {
  _internal_set_average(value);
  // @@protoc_insertion_point(field_set:SystemParameters.Average)
}

// .SystemParameters.BANDWIDTH bandwidth = 12;
inline void SystemParameters::clear_bandwidth() {
  bandwidth_ = 0;
}
inline ::SystemParameters_BANDWIDTH SystemParameters::_internal_bandwidth() const {
  return static_cast< ::SystemParameters_BANDWIDTH >(bandwidth_);
}
inline ::SystemParameters_BANDWIDTH SystemParameters::bandwidth() const {
  // @@protoc_insertion_point(field_get:SystemParameters.bandwidth)
  return _internal_bandwidth();
}
inline void SystemParameters::_internal_set_bandwidth(::SystemParameters_BANDWIDTH value) {
  
  bandwidth_ = value;
}
inline void SystemParameters::set_bandwidth(::SystemParameters_BANDWIDTH value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:SystemParameters.bandwidth)
}

// .SystemParameters.FILTERS filter = 13;
inline void SystemParameters::clear_filter() {
  filter_ = 0;
}
inline ::SystemParameters_FILTERS SystemParameters::_internal_filter() const {
  return static_cast< ::SystemParameters_FILTERS >(filter_);
}
inline ::SystemParameters_FILTERS SystemParameters::filter() const {
  // @@protoc_insertion_point(field_get:SystemParameters.filter)
  return _internal_filter();
}
inline void SystemParameters::_internal_set_filter(::SystemParameters_FILTERS value) {
  
  filter_ = value;
}
inline void SystemParameters::set_filter(::SystemParameters_FILTERS value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:SystemParameters.filter)
}

// -------------------------------------------------------------------

// Frequency

// double freq = 14;
inline void Frequency::clear_freq() {
  freq_ = 0;
}
inline double Frequency::_internal_freq() const {
  return freq_;
}
inline double Frequency::freq() const {
  // @@protoc_insertion_point(field_get:Frequency.freq)
  return _internal_freq();
}
inline void Frequency::_internal_set_freq(double value) {
  
  freq_ = value;
}
inline void Frequency::set_freq(double value) {
  _internal_set_freq(value);
  // @@protoc_insertion_point(field_set:Frequency.freq)
}

// -------------------------------------------------------------------

// Threshold

// double thr = 15;
inline void Threshold::clear_thr() {
  thr_ = 0;
}
inline double Threshold::_internal_thr() const {
  return thr_;
}
inline double Threshold::thr() const {
  // @@protoc_insertion_point(field_get:Threshold.thr)
  return _internal_thr();
}
inline void Threshold::_internal_set_thr(double value) {
  
  thr_ = value;
}
inline void Threshold::set_thr(double value) {
  _internal_set_thr(value);
  // @@protoc_insertion_point(field_set:Threshold.thr)
}

// -------------------------------------------------------------------

// PSDDataRdyDOUBLE

// string type = 1000;
inline void PSDDataRdyDOUBLE::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PSDDataRdyDOUBLE::type() const {
  // @@protoc_insertion_point(field_get:PSDDataRdyDOUBLE.type)
  return _internal_type();
}
inline void PSDDataRdyDOUBLE::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PSDDataRdyDOUBLE.type)
}
inline std::string* PSDDataRdyDOUBLE::mutable_type() {
  // @@protoc_insertion_point(field_mutable:PSDDataRdyDOUBLE.type)
  return _internal_mutable_type();
}
inline const std::string& PSDDataRdyDOUBLE::_internal_type() const {
  return type_.Get();
}
inline void PSDDataRdyDOUBLE::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PSDDataRdyDOUBLE::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PSDDataRdyDOUBLE.type)
}
inline void PSDDataRdyDOUBLE::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PSDDataRdyDOUBLE.type)
}
inline void PSDDataRdyDOUBLE::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PSDDataRdyDOUBLE.type)
}
inline std::string* PSDDataRdyDOUBLE::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PSDDataRdyDOUBLE::release_type() {
  // @@protoc_insertion_point(field_release:PSDDataRdyDOUBLE.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PSDDataRdyDOUBLE::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PSDDataRdyDOUBLE.type)
}
inline std::string* PSDDataRdyDOUBLE::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PSDDataRdyDOUBLE.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PSDDataRdyDOUBLE::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PSDDataRdyDOUBLE.type)
}

// int32 size = 16;
inline void PSDDataRdyDOUBLE::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSDDataRdyDOUBLE::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSDDataRdyDOUBLE::size() const {
  // @@protoc_insertion_point(field_get:PSDDataRdyDOUBLE.size)
  return _internal_size();
}
inline void PSDDataRdyDOUBLE::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void PSDDataRdyDOUBLE::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:PSDDataRdyDOUBLE.size)
}

// repeated double PsdData = 17;
inline int PSDDataRdyDOUBLE::_internal_psddata_size() const {
  return psddata_.size();
}
inline int PSDDataRdyDOUBLE::psddata_size() const {
  return _internal_psddata_size();
}
inline void PSDDataRdyDOUBLE::clear_psddata() {
  psddata_.Clear();
}
inline double PSDDataRdyDOUBLE::_internal_psddata(int index) const {
  return psddata_.Get(index);
}
inline double PSDDataRdyDOUBLE::psddata(int index) const {
  // @@protoc_insertion_point(field_get:PSDDataRdyDOUBLE.PsdData)
  return _internal_psddata(index);
}
inline void PSDDataRdyDOUBLE::set_psddata(int index, double value) {
  psddata_.Set(index, value);
  // @@protoc_insertion_point(field_set:PSDDataRdyDOUBLE.PsdData)
}
inline void PSDDataRdyDOUBLE::_internal_add_psddata(double value) {
  psddata_.Add(value);
}
inline void PSDDataRdyDOUBLE::add_psddata(double value) {
  _internal_add_psddata(value);
  // @@protoc_insertion_point(field_add:PSDDataRdyDOUBLE.PsdData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PSDDataRdyDOUBLE::_internal_psddata() const {
  return psddata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PSDDataRdyDOUBLE::psddata() const {
  // @@protoc_insertion_point(field_list:PSDDataRdyDOUBLE.PsdData)
  return _internal_psddata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PSDDataRdyDOUBLE::_internal_mutable_psddata() {
  return &psddata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PSDDataRdyDOUBLE::mutable_psddata() {
  // @@protoc_insertion_point(field_mutable_list:PSDDataRdyDOUBLE.PsdData)
  return _internal_mutable_psddata();
}

// -------------------------------------------------------------------

// PSDDataRdyINT

// int32 size = 18;
inline void PSDDataRdyINT::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSDDataRdyINT::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSDDataRdyINT::size() const {
  // @@protoc_insertion_point(field_get:PSDDataRdyINT.size)
  return _internal_size();
}
inline void PSDDataRdyINT::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void PSDDataRdyINT::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:PSDDataRdyINT.size)
}

// repeated int32 PsdData = 19;
inline int PSDDataRdyINT::_internal_psddata_size() const {
  return psddata_.size();
}
inline int PSDDataRdyINT::psddata_size() const {
  return _internal_psddata_size();
}
inline void PSDDataRdyINT::clear_psddata() {
  psddata_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSDDataRdyINT::_internal_psddata(int index) const {
  return psddata_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSDDataRdyINT::psddata(int index) const {
  // @@protoc_insertion_point(field_get:PSDDataRdyINT.PsdData)
  return _internal_psddata(index);
}
inline void PSDDataRdyINT::set_psddata(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  psddata_.Set(index, value);
  // @@protoc_insertion_point(field_set:PSDDataRdyINT.PsdData)
}
inline void PSDDataRdyINT::_internal_add_psddata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  psddata_.Add(value);
}
inline void PSDDataRdyINT::add_psddata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_psddata(value);
  // @@protoc_insertion_point(field_add:PSDDataRdyINT.PsdData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PSDDataRdyINT::_internal_psddata() const {
  return psddata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PSDDataRdyINT::psddata() const {
  // @@protoc_insertion_point(field_list:PSDDataRdyINT.PsdData)
  return _internal_psddata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PSDDataRdyINT::_internal_mutable_psddata() {
  return &psddata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PSDDataRdyINT::mutable_psddata() {
  // @@protoc_insertion_point(field_mutable_list:PSDDataRdyINT.PsdData)
  return _internal_mutable_psddata();
}

// -------------------------------------------------------------------

// DOADataRdydouble

// string type = 1001;
inline void DOADataRdydouble::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DOADataRdydouble::type() const {
  // @@protoc_insertion_point(field_get:DOADataRdydouble.type)
  return _internal_type();
}
inline void DOADataRdydouble::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DOADataRdydouble.type)
}
inline std::string* DOADataRdydouble::mutable_type() {
  // @@protoc_insertion_point(field_mutable:DOADataRdydouble.type)
  return _internal_mutable_type();
}
inline const std::string& DOADataRdydouble::_internal_type() const {
  return type_.Get();
}
inline void DOADataRdydouble::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DOADataRdydouble::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DOADataRdydouble.type)
}
inline void DOADataRdydouble::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DOADataRdydouble.type)
}
inline void DOADataRdydouble::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DOADataRdydouble.type)
}
inline std::string* DOADataRdydouble::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DOADataRdydouble::release_type() {
  // @@protoc_insertion_point(field_release:DOADataRdydouble.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DOADataRdydouble::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DOADataRdydouble.type)
}
inline std::string* DOADataRdydouble::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DOADataRdydouble.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DOADataRdydouble::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DOADataRdydouble.type)
}

// int32 size = 20;
inline void DOADataRdydouble::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DOADataRdydouble::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DOADataRdydouble::size() const {
  // @@protoc_insertion_point(field_get:DOADataRdydouble.size)
  return _internal_size();
}
inline void DOADataRdydouble::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void DOADataRdydouble::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:DOADataRdydouble.size)
}

// repeated double DOAData = 21;
inline int DOADataRdydouble::_internal_doadata_size() const {
  return doadata_.size();
}
inline int DOADataRdydouble::doadata_size() const {
  return _internal_doadata_size();
}
inline void DOADataRdydouble::clear_doadata() {
  doadata_.Clear();
}
inline double DOADataRdydouble::_internal_doadata(int index) const {
  return doadata_.Get(index);
}
inline double DOADataRdydouble::doadata(int index) const {
  // @@protoc_insertion_point(field_get:DOADataRdydouble.DOAData)
  return _internal_doadata(index);
}
inline void DOADataRdydouble::set_doadata(int index, double value) {
  doadata_.Set(index, value);
  // @@protoc_insertion_point(field_set:DOADataRdydouble.DOAData)
}
inline void DOADataRdydouble::_internal_add_doadata(double value) {
  doadata_.Add(value);
}
inline void DOADataRdydouble::add_doadata(double value) {
  _internal_add_doadata(value);
  // @@protoc_insertion_point(field_add:DOADataRdydouble.DOAData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DOADataRdydouble::_internal_doadata() const {
  return doadata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DOADataRdydouble::doadata() const {
  // @@protoc_insertion_point(field_list:DOADataRdydouble.DOAData)
  return _internal_doadata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DOADataRdydouble::_internal_mutable_doadata() {
  return &doadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DOADataRdydouble::mutable_doadata() {
  // @@protoc_insertion_point(field_mutable_list:DOADataRdydouble.DOAData)
  return _internal_mutable_doadata();
}

// -------------------------------------------------------------------

// DOADataRdyshort

// int32 size = 22;
inline void DOADataRdyshort::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DOADataRdyshort::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DOADataRdyshort::size() const {
  // @@protoc_insertion_point(field_get:DOADataRdyshort.size)
  return _internal_size();
}
inline void DOADataRdyshort::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void DOADataRdyshort::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:DOADataRdyshort.size)
}

// repeated int32 DoaData = 23;
inline int DOADataRdyshort::_internal_doadata_size() const {
  return doadata_.size();
}
inline int DOADataRdyshort::doadata_size() const {
  return _internal_doadata_size();
}
inline void DOADataRdyshort::clear_doadata() {
  doadata_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DOADataRdyshort::_internal_doadata(int index) const {
  return doadata_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DOADataRdyshort::doadata(int index) const {
  // @@protoc_insertion_point(field_get:DOADataRdyshort.DoaData)
  return _internal_doadata(index);
}
inline void DOADataRdyshort::set_doadata(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  doadata_.Set(index, value);
  // @@protoc_insertion_point(field_set:DOADataRdyshort.DoaData)
}
inline void DOADataRdyshort::_internal_add_doadata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  doadata_.Add(value);
}
inline void DOADataRdyshort::add_doadata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_doadata(value);
  // @@protoc_insertion_point(field_add:DOADataRdyshort.DoaData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DOADataRdyshort::_internal_doadata() const {
  return doadata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DOADataRdyshort::doadata() const {
  // @@protoc_insertion_point(field_list:DOADataRdyshort.DoaData)
  return _internal_doadata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DOADataRdyshort::_internal_mutable_doadata() {
  return &doadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DOADataRdyshort::mutable_doadata() {
  // @@protoc_insertion_point(field_mutable_list:DOADataRdyshort.DoaData)
  return _internal_mutable_doadata();
}

// -------------------------------------------------------------------

// AudioDataRdy

// int32 size = 24;
inline void AudioDataRdy::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioDataRdy::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioDataRdy::size() const {
  // @@protoc_insertion_point(field_get:AudioDataRdy.size)
  return _internal_size();
}
inline void AudioDataRdy::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void AudioDataRdy::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:AudioDataRdy.size)
}

// repeated bytes AudioData = 25;
inline int AudioDataRdy::_internal_audiodata_size() const {
  return audiodata_.size();
}
inline int AudioDataRdy::audiodata_size() const {
  return _internal_audiodata_size();
}
inline void AudioDataRdy::clear_audiodata() {
  audiodata_.Clear();
}
inline std::string* AudioDataRdy::add_audiodata() {
  // @@protoc_insertion_point(field_add_mutable:AudioDataRdy.AudioData)
  return _internal_add_audiodata();
}
inline const std::string& AudioDataRdy::_internal_audiodata(int index) const {
  return audiodata_.Get(index);
}
inline const std::string& AudioDataRdy::audiodata(int index) const {
  // @@protoc_insertion_point(field_get:AudioDataRdy.AudioData)
  return _internal_audiodata(index);
}
inline std::string* AudioDataRdy::mutable_audiodata(int index) {
  // @@protoc_insertion_point(field_mutable:AudioDataRdy.AudioData)
  return audiodata_.Mutable(index);
}
inline void AudioDataRdy::set_audiodata(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AudioDataRdy.AudioData)
  audiodata_.Mutable(index)->assign(value);
}
inline void AudioDataRdy::set_audiodata(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AudioDataRdy.AudioData)
  audiodata_.Mutable(index)->assign(std::move(value));
}
inline void AudioDataRdy::set_audiodata(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audiodata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AudioDataRdy.AudioData)
}
inline void AudioDataRdy::set_audiodata(int index, const void* value, size_t size) {
  audiodata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AudioDataRdy.AudioData)
}
inline std::string* AudioDataRdy::_internal_add_audiodata() {
  return audiodata_.Add();
}
inline void AudioDataRdy::add_audiodata(const std::string& value) {
  audiodata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AudioDataRdy.AudioData)
}
inline void AudioDataRdy::add_audiodata(std::string&& value) {
  audiodata_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AudioDataRdy.AudioData)
}
inline void AudioDataRdy::add_audiodata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audiodata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AudioDataRdy.AudioData)
}
inline void AudioDataRdy::add_audiodata(const void* value, size_t size) {
  audiodata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AudioDataRdy.AudioData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AudioDataRdy::audiodata() const {
  // @@protoc_insertion_point(field_list:AudioDataRdy.AudioData)
  return audiodata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AudioDataRdy::mutable_audiodata() {
  // @@protoc_insertion_point(field_mutable_list:AudioDataRdy.AudioData)
  return &audiodata_;
}

// -------------------------------------------------------------------

// AudioState

// bool audio = 26;
inline void AudioState::clear_audio() {
  audio_ = false;
}
inline bool AudioState::_internal_audio() const {
  return audio_;
}
inline bool AudioState::audio() const {
  // @@protoc_insertion_point(field_get:AudioState.audio)
  return _internal_audio();
}
inline void AudioState::_internal_set_audio(bool value) {
  
  audio_ = value;
}
inline void AudioState::set_audio(bool value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:AudioState.audio)
}

// -------------------------------------------------------------------

// GPSParameter

// double Lat = 27;
inline void GPSParameter::clear_lat() {
  lat_ = 0;
}
inline double GPSParameter::_internal_lat() const {
  return lat_;
}
inline double GPSParameter::lat() const {
  // @@protoc_insertion_point(field_get:GPSParameter.Lat)
  return _internal_lat();
}
inline void GPSParameter::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void GPSParameter::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:GPSParameter.Lat)
}

// double long = 28;
inline void GPSParameter::clear_long_() {
  long__ = 0;
}
inline double GPSParameter::_internal_long_() const {
  return long__;
}
inline double GPSParameter::long_() const {
  // @@protoc_insertion_point(field_get:GPSParameter.long)
  return _internal_long_();
}
inline void GPSParameter::_internal_set_long_(double value) {
  
  long__ = value;
}
inline void GPSParameter::set_long_(double value) {
  _internal_set_long_(value);
  // @@protoc_insertion_point(field_set:GPSParameter.long)
}

// double compassOffset = 29;
inline void GPSParameter::clear_compassoffset() {
  compassoffset_ = 0;
}
inline double GPSParameter::_internal_compassoffset() const {
  return compassoffset_;
}
inline double GPSParameter::compassoffset() const {
  // @@protoc_insertion_point(field_get:GPSParameter.compassOffset)
  return _internal_compassoffset();
}
inline void GPSParameter::_internal_set_compassoffset(double value) {
  
  compassoffset_ = value;
}
inline void GPSParameter::set_compassoffset(double value) {
  _internal_set_compassoffset(value);
  // @@protoc_insertion_point(field_set:GPSParameter.compassOffset)
}

// double azimuth = 30;
inline void GPSParameter::clear_azimuth() {
  azimuth_ = 0;
}
inline double GPSParameter::_internal_azimuth() const {
  return azimuth_;
}
inline double GPSParameter::azimuth() const {
  // @@protoc_insertion_point(field_get:GPSParameter.azimuth)
  return _internal_azimuth();
}
inline void GPSParameter::_internal_set_azimuth(double value) {
  
  azimuth_ = value;
}
inline void GPSParameter::set_azimuth(double value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:GPSParameter.azimuth)
}

// -------------------------------------------------------------------

// AntennaState

// bool ADD050 = 31;
inline void AntennaState::clear_add050() {
  add050_ = false;
}
inline bool AntennaState::_internal_add050() const {
  return add050_;
}
inline bool AntennaState::add050() const {
  // @@protoc_insertion_point(field_get:AntennaState.ADD050)
  return _internal_add050();
}
inline void AntennaState::_internal_set_add050(bool value) {
  
  add050_ = value;
}
inline void AntennaState::set_add050(bool value) {
  _internal_set_add050(value);
  // @@protoc_insertion_point(field_set:AntennaState.ADD050)
}

// bool ADD150 = 32;
inline void AntennaState::clear_add150() {
  add150_ = false;
}
inline bool AntennaState::_internal_add150() const {
  return add150_;
}
inline bool AntennaState::add150() const {
  // @@protoc_insertion_point(field_get:AntennaState.ADD150)
  return _internal_add150();
}
inline void AntennaState::_internal_set_add150(bool value) {
  
  add150_ = value;
}
inline void AntennaState::set_add150(bool value) {
  _internal_set_add150(value);
  // @@protoc_insertion_point(field_set:AntennaState.ADD150)
}

// bool ADD078 = 33;
inline void AntennaState::clear_add078() {
  add078_ = false;
}
inline bool AntennaState::_internal_add078() const {
  return add078_;
}
inline bool AntennaState::add078() const {
  // @@protoc_insertion_point(field_get:AntennaState.ADD078)
  return _internal_add078();
}
inline void AntennaState::_internal_set_add078(bool value) {
  
  add078_ = value;
}
inline void AntennaState::set_add078(bool value) {
  _internal_set_add078(value);
  // @@protoc_insertion_point(field_set:AntennaState.ADD078)
}

// bool ADD070 = 34;
inline void AntennaState::clear_add070() {
  add070_ = false;
}
inline bool AntennaState::_internal_add070() const {
  return add070_;
}
inline bool AntennaState::add070() const {
  // @@protoc_insertion_point(field_get:AntennaState.ADD070)
  return _internal_add070();
}
inline void AntennaState::_internal_set_add070(bool value) {
  
  add070_ = value;
}
inline void AntennaState::set_add070(bool value) {
  _internal_set_add070(value);
  // @@protoc_insertion_point(field_set:AntennaState.ADD070)
}

// bool ADD327 = 35;
inline void AntennaState::clear_add327() {
  add327_ = false;
}
inline bool AntennaState::_internal_add327() const {
  return add327_;
}
inline bool AntennaState::add327() const {
  // @@protoc_insertion_point(field_get:AntennaState.ADD327)
  return _internal_add327();
}
inline void AntennaState::_internal_set_add327(bool value) {
  
  add327_ = value;
}
inline void AntennaState::set_add327(bool value) {
  _internal_set_add327(value);
  // @@protoc_insertion_point(field_set:AntennaState.ADD327)
}

// bool ADD207 = 36;
inline void AntennaState::clear_add207() {
  add207_ = false;
}
inline bool AntennaState::_internal_add207() const {
  return add207_;
}
inline bool AntennaState::add207() const {
  // @@protoc_insertion_point(field_get:AntennaState.ADD207)
  return _internal_add207();
}
inline void AntennaState::_internal_set_add207(bool value) {
  
  add207_ = value;
}
inline void AntennaState::set_add207(bool value) {
  _internal_set_add207(value);
  // @@protoc_insertion_point(field_set:AntennaState.ADD207)
}

// bool ADD107 = 37;
inline void AntennaState::clear_add107() {
  add107_ = false;
}
inline bool AntennaState::_internal_add107() const {
  return add107_;
}
inline bool AntennaState::add107() const {
  // @@protoc_insertion_point(field_get:AntennaState.ADD107)
  return _internal_add107();
}
inline void AntennaState::_internal_set_add107(bool value) {
  
  add107_ = value;
}
inline void AntennaState::set_add107(bool value) {
  _internal_set_add107(value);
  // @@protoc_insertion_point(field_set:AntennaState.ADD107)
}

// bool ADD227 = 38;
inline void AntennaState::clear_add227() {
  add227_ = false;
}
inline bool AntennaState::_internal_add227() const {
  return add227_;
}
inline bool AntennaState::add227() const {
  // @@protoc_insertion_point(field_get:AntennaState.ADD227)
  return _internal_add227();
}
inline void AntennaState::_internal_set_add227(bool value) {
  
  add227_ = value;
}
inline void AntennaState::set_add227(bool value) {
  _internal_set_add227(value);
  // @@protoc_insertion_point(field_set:AntennaState.ADD227)
}

// -------------------------------------------------------------------

// AntennaOFFset

// double ADD050 = 39;
inline void AntennaOFFset::clear_add050() {
  add050_ = 0;
}
inline double AntennaOFFset::_internal_add050() const {
  return add050_;
}
inline double AntennaOFFset::add050() const {
  // @@protoc_insertion_point(field_get:AntennaOFFset.ADD050)
  return _internal_add050();
}
inline void AntennaOFFset::_internal_set_add050(double value) {
  
  add050_ = value;
}
inline void AntennaOFFset::set_add050(double value) {
  _internal_set_add050(value);
  // @@protoc_insertion_point(field_set:AntennaOFFset.ADD050)
}

// double ADD150 = 40;
inline void AntennaOFFset::clear_add150() {
  add150_ = 0;
}
inline double AntennaOFFset::_internal_add150() const {
  return add150_;
}
inline double AntennaOFFset::add150() const {
  // @@protoc_insertion_point(field_get:AntennaOFFset.ADD150)
  return _internal_add150();
}
inline void AntennaOFFset::_internal_set_add150(double value) {
  
  add150_ = value;
}
inline void AntennaOFFset::set_add150(double value) {
  _internal_set_add150(value);
  // @@protoc_insertion_point(field_set:AntennaOFFset.ADD150)
}

// double ADD078 = 41;
inline void AntennaOFFset::clear_add078() {
  add078_ = 0;
}
inline double AntennaOFFset::_internal_add078() const {
  return add078_;
}
inline double AntennaOFFset::add078() const {
  // @@protoc_insertion_point(field_get:AntennaOFFset.ADD078)
  return _internal_add078();
}
inline void AntennaOFFset::_internal_set_add078(double value) {
  
  add078_ = value;
}
inline void AntennaOFFset::set_add078(double value) {
  _internal_set_add078(value);
  // @@protoc_insertion_point(field_set:AntennaOFFset.ADD078)
}

// double ADD070 = 42;
inline void AntennaOFFset::clear_add070() {
  add070_ = 0;
}
inline double AntennaOFFset::_internal_add070() const {
  return add070_;
}
inline double AntennaOFFset::add070() const {
  // @@protoc_insertion_point(field_get:AntennaOFFset.ADD070)
  return _internal_add070();
}
inline void AntennaOFFset::_internal_set_add070(double value) {
  
  add070_ = value;
}
inline void AntennaOFFset::set_add070(double value) {
  _internal_set_add070(value);
  // @@protoc_insertion_point(field_set:AntennaOFFset.ADD070)
}

// double ADD327 = 43;
inline void AntennaOFFset::clear_add327() {
  add327_ = 0;
}
inline double AntennaOFFset::_internal_add327() const {
  return add327_;
}
inline double AntennaOFFset::add327() const {
  // @@protoc_insertion_point(field_get:AntennaOFFset.ADD327)
  return _internal_add327();
}
inline void AntennaOFFset::_internal_set_add327(double value) {
  
  add327_ = value;
}
inline void AntennaOFFset::set_add327(double value) {
  _internal_set_add327(value);
  // @@protoc_insertion_point(field_set:AntennaOFFset.ADD327)
}

// double ADD207 = 44;
inline void AntennaOFFset::clear_add207() {
  add207_ = 0;
}
inline double AntennaOFFset::_internal_add207() const {
  return add207_;
}
inline double AntennaOFFset::add207() const {
  // @@protoc_insertion_point(field_get:AntennaOFFset.ADD207)
  return _internal_add207();
}
inline void AntennaOFFset::_internal_set_add207(double value) {
  
  add207_ = value;
}
inline void AntennaOFFset::set_add207(double value) {
  _internal_set_add207(value);
  // @@protoc_insertion_point(field_set:AntennaOFFset.ADD207)
}

// double ADD107 = 45;
inline void AntennaOFFset::clear_add107() {
  add107_ = 0;
}
inline double AntennaOFFset::_internal_add107() const {
  return add107_;
}
inline double AntennaOFFset::add107() const {
  // @@protoc_insertion_point(field_get:AntennaOFFset.ADD107)
  return _internal_add107();
}
inline void AntennaOFFset::_internal_set_add107(double value) {
  
  add107_ = value;
}
inline void AntennaOFFset::set_add107(double value) {
  _internal_set_add107(value);
  // @@protoc_insertion_point(field_set:AntennaOFFset.ADD107)
}

// double ADD227 = 46;
inline void AntennaOFFset::clear_add227() {
  add227_ = 0;
}
inline double AntennaOFFset::_internal_add227() const {
  return add227_;
}
inline double AntennaOFFset::add227() const {
  // @@protoc_insertion_point(field_get:AntennaOFFset.ADD227)
  return _internal_add227();
}
inline void AntennaOFFset::_internal_set_add227(double value) {
  
  add227_ = value;
}
inline void AntennaOFFset::set_add227(double value) {
  _internal_set_add227(value);
  // @@protoc_insertion_point(field_set:AntennaOFFset.ADD227)
}

// -------------------------------------------------------------------

// Defaults

// .Defaults.SYSTEMTYPE systemtype = 47;
inline void Defaults::clear_systemtype() {
  systemtype_ = 0;
}
inline ::Defaults_SYSTEMTYPE Defaults::_internal_systemtype() const {
  return static_cast< ::Defaults_SYSTEMTYPE >(systemtype_);
}
inline ::Defaults_SYSTEMTYPE Defaults::systemtype() const {
  // @@protoc_insertion_point(field_get:Defaults.systemtype)
  return _internal_systemtype();
}
inline void Defaults::_internal_set_systemtype(::Defaults_SYSTEMTYPE value) {
  
  systemtype_ = value;
}
inline void Defaults::set_systemtype(::Defaults_SYSTEMTYPE value) {
  _internal_set_systemtype(value);
  // @@protoc_insertion_point(field_set:Defaults.systemtype)
}

// .Defaults.BW WideBandBanwith = 48;
inline void Defaults::clear_widebandbanwith() {
  widebandbanwith_ = 0;
}
inline ::Defaults_BW Defaults::_internal_widebandbanwith() const {
  return static_cast< ::Defaults_BW >(widebandbanwith_);
}
inline ::Defaults_BW Defaults::widebandbanwith() const {
  // @@protoc_insertion_point(field_get:Defaults.WideBandBanwith)
  return _internal_widebandbanwith();
}
inline void Defaults::_internal_set_widebandbanwith(::Defaults_BW value) {
  
  widebandbanwith_ = value;
}
inline void Defaults::set_widebandbanwith(::Defaults_BW value) {
  _internal_set_widebandbanwith(value);
  // @@protoc_insertion_point(field_set:Defaults.WideBandBanwith)
}

// int32 MinimumFreqRange = 49;
inline void Defaults::clear_minimumfreqrange() {
  minimumfreqrange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Defaults::_internal_minimumfreqrange() const {
  return minimumfreqrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Defaults::minimumfreqrange() const {
  // @@protoc_insertion_point(field_get:Defaults.MinimumFreqRange)
  return _internal_minimumfreqrange();
}
inline void Defaults::_internal_set_minimumfreqrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minimumfreqrange_ = value;
}
inline void Defaults::set_minimumfreqrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minimumfreqrange(value);
  // @@protoc_insertion_point(field_set:Defaults.MinimumFreqRange)
}

// int32 MaximumFreqRange = 50;
inline void Defaults::clear_maximumfreqrange() {
  maximumfreqrange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Defaults::_internal_maximumfreqrange() const {
  return maximumfreqrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Defaults::maximumfreqrange() const {
  // @@protoc_insertion_point(field_get:Defaults.MaximumFreqRange)
  return _internal_maximumfreqrange();
}
inline void Defaults::_internal_set_maximumfreqrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maximumfreqrange_ = value;
}
inline void Defaults::set_maximumfreqrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maximumfreqrange(value);
  // @@protoc_insertion_point(field_set:Defaults.MaximumFreqRange)
}

// -------------------------------------------------------------------

// ClassificationState

// bool state = 51;
inline void ClassificationState::clear_state() {
  state_ = false;
}
inline bool ClassificationState::_internal_state() const {
  return state_;
}
inline bool ClassificationState::state() const {
  // @@protoc_insertion_point(field_get:ClassificationState.state)
  return _internal_state();
}
inline void ClassificationState::_internal_set_state(bool value) {
  
  state_ = value;
}
inline void ClassificationState::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ClassificationState.state)
}

// -------------------------------------------------------------------

// ClassificationDataRdy

// .ClassificationDataRdy.SINGALMODE SignalMode = 52;
inline void ClassificationDataRdy::clear_signalmode() {
  signalmode_ = 0;
}
inline ::ClassificationDataRdy_SINGALMODE ClassificationDataRdy::_internal_signalmode() const {
  return static_cast< ::ClassificationDataRdy_SINGALMODE >(signalmode_);
}
inline ::ClassificationDataRdy_SINGALMODE ClassificationDataRdy::signalmode() const {
  // @@protoc_insertion_point(field_get:ClassificationDataRdy.SignalMode)
  return _internal_signalmode();
}
inline void ClassificationDataRdy::_internal_set_signalmode(::ClassificationDataRdy_SINGALMODE value) {
  
  signalmode_ = value;
}
inline void ClassificationDataRdy::set_signalmode(::ClassificationDataRdy_SINGALMODE value) {
  _internal_set_signalmode(value);
  // @@protoc_insertion_point(field_set:ClassificationDataRdy.SignalMode)
}

// int32 startIndex = 53;
inline void ClassificationDataRdy::clear_startindex() {
  startindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassificationDataRdy::_internal_startindex() const {
  return startindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassificationDataRdy::startindex() const {
  // @@protoc_insertion_point(field_get:ClassificationDataRdy.startIndex)
  return _internal_startindex();
}
inline void ClassificationDataRdy::_internal_set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startindex_ = value;
}
inline void ClassificationDataRdy::set_startindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startindex(value);
  // @@protoc_insertion_point(field_set:ClassificationDataRdy.startIndex)
}

// int32 StopIndex = 54;
inline void ClassificationDataRdy::clear_stopindex() {
  stopindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassificationDataRdy::_internal_stopindex() const {
  return stopindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassificationDataRdy::stopindex() const {
  // @@protoc_insertion_point(field_get:ClassificationDataRdy.StopIndex)
  return _internal_stopindex();
}
inline void ClassificationDataRdy::_internal_set_stopindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stopindex_ = value;
}
inline void ClassificationDataRdy::set_stopindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stopindex(value);
  // @@protoc_insertion_point(field_set:ClassificationDataRdy.StopIndex)
}

// int32 CenterIndex = 55;
inline void ClassificationDataRdy::clear_centerindex() {
  centerindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassificationDataRdy::_internal_centerindex() const {
  return centerindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassificationDataRdy::centerindex() const {
  // @@protoc_insertion_point(field_get:ClassificationDataRdy.CenterIndex)
  return _internal_centerindex();
}
inline void ClassificationDataRdy::_internal_set_centerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  centerindex_ = value;
}
inline void ClassificationDataRdy::set_centerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_centerindex(value);
  // @@protoc_insertion_point(field_set:ClassificationDataRdy.CenterIndex)
}

// double Azimuth = 56;
inline void ClassificationDataRdy::clear_azimuth() {
  azimuth_ = 0;
}
inline double ClassificationDataRdy::_internal_azimuth() const {
  return azimuth_;
}
inline double ClassificationDataRdy::azimuth() const {
  // @@protoc_insertion_point(field_get:ClassificationDataRdy.Azimuth)
  return _internal_azimuth();
}
inline void ClassificationDataRdy::_internal_set_azimuth(double value) {
  
  azimuth_ = value;
}
inline void ClassificationDataRdy::set_azimuth(double value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:ClassificationDataRdy.Azimuth)
}

// -------------------------------------------------------------------

// DFstate

// bool DFStartStop = 57;
inline void DFstate::clear_dfstartstop() {
  dfstartstop_ = false;
}
inline bool DFstate::_internal_dfstartstop() const {
  return dfstartstop_;
}
inline bool DFstate::dfstartstop() const {
  // @@protoc_insertion_point(field_get:DFstate.DFStartStop)
  return _internal_dfstartstop();
}
inline void DFstate::_internal_set_dfstartstop(bool value) {
  
  dfstartstop_ = value;
}
inline void DFstate::set_dfstartstop(bool value) {
  _internal_set_dfstartstop(value);
  // @@protoc_insertion_point(field_set:DFstate.DFStartStop)
}

// -------------------------------------------------------------------

// TransferData

// .TransferData.TRANSDATA TransferDataRange = 58;
inline void TransferData::clear_transferdatarange() {
  transferdatarange_ = 0;
}
inline ::TransferData_TRANSDATA TransferData::_internal_transferdatarange() const {
  return static_cast< ::TransferData_TRANSDATA >(transferdatarange_);
}
inline ::TransferData_TRANSDATA TransferData::transferdatarange() const {
  // @@protoc_insertion_point(field_get:TransferData.TransferDataRange)
  return _internal_transferdatarange();
}
inline void TransferData::_internal_set_transferdatarange(::TransferData_TRANSDATA value) {
  
  transferdatarange_ = value;
}
inline void TransferData::set_transferdatarange(::TransferData_TRANSDATA value) {
  _internal_set_transferdatarange(value);
  // @@protoc_insertion_point(field_set:TransferData.TransferDataRange)
}

// bool TransferAudio = 59;
inline void TransferData::clear_transferaudio() {
  transferaudio_ = false;
}
inline bool TransferData::_internal_transferaudio() const {
  return transferaudio_;
}
inline bool TransferData::transferaudio() const {
  // @@protoc_insertion_point(field_get:TransferData.TransferAudio)
  return _internal_transferaudio();
}
inline void TransferData::_internal_set_transferaudio(bool value) {
  
  transferaudio_ = value;
}
inline void TransferData::set_transferaudio(bool value) {
  _internal_set_transferaudio(value);
  // @@protoc_insertion_point(field_set:TransferData.TransferAudio)
}

// bool TransferPSD = 60;
inline void TransferData::clear_transferpsd() {
  transferpsd_ = false;
}
inline bool TransferData::_internal_transferpsd() const {
  return transferpsd_;
}
inline bool TransferData::transferpsd() const {
  // @@protoc_insertion_point(field_get:TransferData.TransferPSD)
  return _internal_transferpsd();
}
inline void TransferData::_internal_set_transferpsd(bool value) {
  
  transferpsd_ = value;
}
inline void TransferData::set_transferpsd(bool value) {
  _internal_set_transferpsd(value);
  // @@protoc_insertion_point(field_set:TransferData.TransferPSD)
}

// bool TransferDOA = 61;
inline void TransferData::clear_transferdoa() {
  transferdoa_ = false;
}
inline bool TransferData::_internal_transferdoa() const {
  return transferdoa_;
}
inline bool TransferData::transferdoa() const {
  // @@protoc_insertion_point(field_get:TransferData.TransferDOA)
  return _internal_transferdoa();
}
inline void TransferData::_internal_set_transferdoa(bool value) {
  
  transferdoa_ = value;
}
inline void TransferData::set_transferdoa(bool value) {
  _internal_set_transferdoa(value);
  // @@protoc_insertion_point(field_set:TransferData.TransferDOA)
}

// bool TransferSystemParameters = 62;
inline void TransferData::clear_transfersystemparameters() {
  transfersystemparameters_ = false;
}
inline bool TransferData::_internal_transfersystemparameters() const {
  return transfersystemparameters_;
}
inline bool TransferData::transfersystemparameters() const {
  // @@protoc_insertion_point(field_get:TransferData.TransferSystemParameters)
  return _internal_transfersystemparameters();
}
inline void TransferData::_internal_set_transfersystemparameters(bool value) {
  
  transfersystemparameters_ = value;
}
inline void TransferData::set_transfersystemparameters(bool value) {
  _internal_set_transfersystemparameters(value);
  // @@protoc_insertion_point(field_set:TransferData.TransferSystemParameters)
}

// bool TransferDFParameters = 63;
inline void TransferData::clear_transferdfparameters() {
  transferdfparameters_ = false;
}
inline bool TransferData::_internal_transferdfparameters() const {
  return transferdfparameters_;
}
inline bool TransferData::transferdfparameters() const {
  // @@protoc_insertion_point(field_get:TransferData.TransferDFParameters)
  return _internal_transferdfparameters();
}
inline void TransferData::_internal_set_transferdfparameters(bool value) {
  
  transferdfparameters_ = value;
}
inline void TransferData::set_transferdfparameters(bool value) {
  _internal_set_transferdfparameters(value);
  // @@protoc_insertion_point(field_set:TransferData.TransferDFParameters)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SystemParameters_AGC> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SystemParameters_AGC>() {
  return ::SystemParameters_AGC_descriptor();
}
template <> struct is_proto_enum< ::SystemParameters_RFHEAD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SystemParameters_RFHEAD>() {
  return ::SystemParameters_RFHEAD_descriptor();
}
template <> struct is_proto_enum< ::SystemParameters_DEMOD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SystemParameters_DEMOD>() {
  return ::SystemParameters_DEMOD_descriptor();
}
template <> struct is_proto_enum< ::SystemParameters_FFTPOINT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SystemParameters_FFTPOINT>() {
  return ::SystemParameters_FFTPOINT_descriptor();
}
template <> struct is_proto_enum< ::SystemParameters_BANDWIDTH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SystemParameters_BANDWIDTH>() {
  return ::SystemParameters_BANDWIDTH_descriptor();
}
template <> struct is_proto_enum< ::SystemParameters_FILTERS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SystemParameters_FILTERS>() {
  return ::SystemParameters_FILTERS_descriptor();
}
template <> struct is_proto_enum< ::Defaults_SYSTEMTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Defaults_SYSTEMTYPE>() {
  return ::Defaults_SYSTEMTYPE_descriptor();
}
template <> struct is_proto_enum< ::Defaults_BW> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Defaults_BW>() {
  return ::Defaults_BW_descriptor();
}
template <> struct is_proto_enum< ::ClassificationDataRdy_SINGALMODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClassificationDataRdy_SINGALMODE>() {
  return ::ClassificationDataRdy_SINGALMODE_descriptor();
}
template <> struct is_proto_enum< ::TransferData_TRANSDATA> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TransferData_TRANSDATA>() {
  return ::TransferData_TRANSDATA_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Connection_2eproto
